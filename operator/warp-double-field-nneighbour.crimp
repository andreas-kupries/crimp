crimp_primitive warp_double_field_nneighbour {
    image_double image
    image_double xvector
    image_double yvector
} image {
    /*
     * Warp image using the given vector field.
     */

    crimp_image* result;
    int x, y;
    double xf, yf;

    if (!crimp_eq_dim (xvector, yvector)) {
        Tcl_SetResult(interp, "Unable to warp, expected equally-sized coordinate fields", TCL_STATIC);
        return NULL;
    }

    /*
     * Create result and scan through it, sampling the input under the guidance of
     * the coordinate fields.
     */

    result = crimp_new_at (image->itype, crimp_x (xvector), crimp_y (xvector), crimp_w (xvector), crimp_h (xvector));

    for (y = 0; y < crimp_h (result); y++) {
        for (x = 0; x < crimp_w (result); x++) {
	    int xi, yi, outside;

	    xf = DOUBLEP (xvector, x, y);
	    yf = DOUBLEP (yvector, x, y);

	    xi = crimp_nearest (xf);
	    yi = crimp_nearest (yf);

	    outside = (xi < 0) || (xi >= crimp_w (image)) || (yi < 0) || (yi >= crimp_h (image));

	    DOUBLEP (result, x, y) = outside ? BLACK : DOUBLEP (image, xi, yi);
        }
    }

    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
