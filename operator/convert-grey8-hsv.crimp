crimp_primitive convert_2hsv_grey8 {
    image_grey8 image
    lut_hsv   color
} image {
    crimp_image* result;
    int          x, y, value;

    /*
     * This conversion from greyscale to color (HSV) is a general false-color
     * transformation, mapping each pixel value to an arbitrary color, through
     * a lookup table.
     *
     * Important: For the sake of convenience the color map is not provided as a
     * (Tcl) list (of values), or array, but as an _image_ itself, a 256x1 (WxH)
     * hsv. We will have constructors for such images.
     */

    result = crimp_new_hsv_at (crimp_x (image), crimp_y (image), crimp_w (image), crimp_h (image));

    for (y = 0; y < crimp_h (image); y++) {
        for (x = 0; x < crimp_w (image); x++) {

	    value = GREY8 (image, x, y);
	    H (result, x, y) = H (color, value, 0);
	    S (result, x, y) = S (color, value, 0);
	    V (result, x, y) = V (color, value, 0);
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
