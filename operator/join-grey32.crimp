join_2grey32
Tcl_Obj* mmsbImageObj
Tcl_Obj* lmsbImageObj
Tcl_Obj* mlsbImageObj
Tcl_Obj* llsbImageObj

crimp_image*     result;
crimp_image*     mmsb;
crimp_image*     lmsb;
crimp_image*     mlsb;
crimp_image*     llsb;
int              x, y;

crimp_input (mmsbImageObj, mmsb, grey8);
crimp_input (lmsbImageObj, lmsb, grey8);
crimp_input (mlsbImageObj, mlsb, grey8);
crimp_input (llsbImageObj, llsb, grey8);

if (!crimp_eq_dim (mmsb, lmsb) ||
    !crimp_eq_dim (lmsb, mlsb) ||
    !crimp_eq_dim (mlsb, llsb)) {
    Tcl_SetResult(interp, "image dimensions do not match", TCL_STATIC);
    return TCL_ERROR;
}

result = crimp_new_grey32 (mmsb->w, mmsb->h);

for (y = 0; y < result->h; y++) {
    for (x = 0; x < result->w; x++) {

	/*
	 * Assembling the bytes of a pixel from the associated input images.
	 */

	int value = 
	    GREY8  (llsb, x, y)        |
	    (GREY8 (mlsb, x, y) <<  8) |
	    (GREY8 (lmsb, x, y) << 16) |
	    (GREY8 (mmsb, x, y) << 24);

	GREY32 (result, x, y) = value;
    }
}

Tcl_SetObjResult(interp, crimp_new_image_obj (result));
return TCL_OK;


/* vim: set sts=4 sw=4 tw=80 et ft=c: */
/*
 * Local Variables:
 * mode: c
 * c-basic-offset: 4
 * fill-column: 78
 * End:
 */
