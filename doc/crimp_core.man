[comment {-*- tcl -*- doctools manpage}]
[manpage_begin crimp_core n 0.1]
[copyright {2011 Andreas Kupries}]
[copyright {2011 Documentation, Andreas Kupries}]
[moddesc   {Image Manipulation}]
[titledesc {Image Manipulation Core Facilities}]
[require Tcl 8.5]
[require crimp::core [opt 0.1]]
[keywords photo image matrix vector]
[keywords {computer vision}]
[keywords {document processing}]
[keywords {image type}]
[keywords {image accessors}]
[description]

This package is the foundational core for all of CRIMP, the C Raster
Image Manipulation Package.

For a basic introduction of the whole CRIMP eco-system please read the
[term {Introduction to CRIMP}] (sic!).

[para]
As the foundation its location is in the bottom-most layer of the
system's architecture, as shown at

[para][image arch_core][para]

This core provides both C and Tcl level data types and accessors for
images, plus rudimentary IO capabilities (conversion to and
construction from matrices of numbers, represented by nested Tcl
lists).

[para]

The following sections first describe the basic concepts of the
system, like images and image types, general organization of the
command space, etc. After that follows a reference of the Tcl and C
APIs provided by the core.

[section Images]

Images are values. This means that they have a string
representation. It is however strongly recommended to not access this
representation at all, and to only use the accessor commands provided
by crimp to obtain the information stored in the internal
representation of image values.

[para]

The reason behind this is simple: Memory and speed. Images can be
large. Generating the string representation from the internal one
roughly doubles the memory needed to store it, actually a bit more,
due to the necessary quoting of bytes in UTF-8 and list-quting them as
well. Furthermore such a conversion takes time, roughly proportional
to the size of the image itself, in either direction. Properly
accessing the image information without the package's accessor
commands requires list commands. This causes the loss of the internal
representation, thus forcing later a reconversion to the image's
internal represention when it is used as image again. I.e. the
shimmering forces us to convert twice.

[para]

Therefore, to avoid this, use only the crimp commands to access the
images. Even the raw pixel data is accessible in this manner. While
access to that in a Tcl script is, IMHO, highly unusual, there are
situations where it is beneficial. An example of such a situation are
the commands exporting images to raw portable any-maps (PNMs). Our
pixel data fits these formats exactly, and with access to it these
commands could be written in Tcl instead of requiring C level primitives.


[section {Image Types}]

Each image has a [term type], a string implicitly describing features
like the colorspace the image is in, the number of (color) channels,
the domain, i.e. bit-depth, of pixel values in the channels, etc.

[para]

All type strings have the form [const crimp::image::][var foo].

[para]

The package currently knows the following types:

[list_begin definitions]
[def [const rgba]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		4, named "red", "green", and "blue",
				plus an "alpha" channel controlling
				pixel opacity.
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const rgb]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		3, named "red", "green", and "blue".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const hsv]]
	[list_begin definitions]
	[def Colorspace]	HSV, also known as Hue, Saturation, and Value.
	[def Channels]		3, named "hue", "saturation", and "value".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const grey8]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	1 byte.
	[list_end]
[def [const grey16]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		2 byte/channel (16 bit, values 0-65,535).
	[def Pixel-size]	2 bytes.
	[list_end]
[def [const grey32]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		4 byte/channel (16 bit, values 0-4,294,967,296).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const bw]]
	[list_begin definitions]
	[def Colorspace]	Binary.
	[def Channels]		1, named "bw".
	[def Bit-depth]		1 bit/channel.
	[def Pixel-size]	1 byte. I.e. 7 bits/channel are wasted.
	[list_end]
[def [const float]]
	[list_begin definitions]
	[def Colorspace]	N.A / Floating Point.
	[def Channels]		1, named "value".
	[def Bit-depth]		4 byte/channel.
	[def Pixel-size]	4 byte.
	[list_end]
[list_end]

Support for the various types varies by operation. The exact image
types supported by each operation are listed the operation's
description. Invoking an operation for a type it doesn't support will
generally cause it to throw an error.


[section {General design}]

All commands operate in a pipeline fashion, taking zero or more image
values, zero or more other arguments, and returning zero or more
images or other values. None are operating in place, i.e. taking an
image variable and writing back to it.

[para]

They fall into five categories, namely:

[para][image organization]

[list_begin definitions]
[def Accessors]

They take one or more images, extract information about them, and
return this information as their result. This can be a simple as
querying the image's height, to something as complex as counting pixel
values for a histogram.

[para]

The list of accessors, their syntax, and detailed meaning can be found
in section [sectref Accessors].

[def Manipulators]

These take an image and transform its contents in some way, leaving
the image type unchanged. Examples of commands in category are
inversion, gamma conversion, etc. They fall into two sub-categories,
manipulation of the image geometry, and of the intensity values or
colors.

[def Converters]

Similar to manipulators, except that they change the image's type,
preserving the content instead. Here reside operations like conversion
between the HSV and RGB colorspaces, to greyscale and back, etc.

[def I/O]

Another variant of the same theme, i.e. akin to converters and
manipulators, yet not the same, these commands read and write images
from and to files or other data structures. I.e. they convert between
different serializations of image content and type.

[para]

The list of I/O commands, their syntax, and detailed meaning can be
found in section [sectref {I/O commands}].


[def Support]

Lastly, but not leastly a number of commands, which, while not image
commands themselves, support the others.

[list_end]


The core package specified here provides only Accessors and
rudimentary I/O commands. All other sections are filled out by the
other packages of the CRIMP eco-system.


[section {Tcl API}]
[subsection Accessors]
[list_begin definitions]
[call [cmd ::crimp] [method channels] [arg image]]
[keywords channels]

This method returns a list containing the names of the channels in the
[arg image]. The order of channels is the same as expected by the
[method remap] method.

[para] The method supports all image types.


[call [cmd ::crimp] [method dimensions] [arg image]]
[keywords dimensions]

This method returns the width and height of the [arg image] (in
pixels).  The result is a 2-element list containing width and height,
in this order.

[para] The method supports all image types.


[call [cmd ::crimp] [method height] [arg image]]

This method returns the height of the [arg image] (in pixels).

[para] The method supports all image types.

[call [cmd ::crimp] [method {meta append}] [arg image] [arg key] [opt [arg string]...]]
[call [cmd ::crimp] [method {meta create}] [arg image] [opt "[arg key] [arg value]..."]]
[call [cmd ::crimp] [method {meta exists}] [arg image] [arg key] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta filter}] [arg image] [arg args]...]
[call [cmd ::crimp] [method {meta for}] [arg image] \{[arg keyVar] [arg valueVar]\} [arg body]]
[call [cmd ::crimp] [method {meta get}] [arg image] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta incr}] [arg image] [arg key] [opt [arg increment]]]
[call [cmd ::crimp] [method {meta info}] [arg image]]
[call [cmd ::crimp] [method {meta keys}] [arg image] [opt [arg globPattern]]]
[call [cmd ::crimp] [method {meta lappend}] [arg image] [arg key] [opt [arg value]...]]
[call [cmd ::crimp] [method {meta merge}] [arg image] [opt [arg dictionaryValue]...]]
[call [cmd ::crimp] [method {meta remove}] [arg image] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta replace}] [arg image] [opt "[arg key] [arg value]..."]]
[call [cmd ::crimp] [method {meta set}] [arg image] [arg key] [opt [arg key]...] [arg value]]
[call [cmd ::crimp] [method {meta size}] [arg image]]
[call [cmd ::crimp] [method {meta unset}] [arg image] [arg key] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta values}] [arg image] [opt [arg globPattern]]]

These methods provide access to the meta data slot of images, treating
its contents as a dictionary. As such all the methods provided here
have an appropriate counterpart in the methods of Tcl's builtin
command [cmd dict], with the image's metadata taking the place of the
dictionary value or vqariable.

The converse is not true, as [cmd dict]'s methods [method update] and
[method with] are not supported here.

[para] Please read the documentation of Tcl's [cmd dict] command for reference.

[para] [emph NOTE] that the toplevel key [const crimp] is reserved for
use by CRIMP itself.


[call [cmd ::crimp] [method pixel] [arg image]]

This method returns the raw pixels of the [arg image] as a Tcl ByteArray.

[para] The method supports all image types.

[call [cmd ::crimp] [method type] [arg image]]

This method returns the type of the [arg image].

[para] The method supports all image types.


[call [cmd ::crimp] [method width] [arg image]]

This method returns the width of the [arg image] (in pixels).

[para] The method supports all image types.

[list_end]


[subsection {I/O commands}]
[list_begin definitions]

[call [cmd ::crimp] [method {read tcl grey8}] [arg pixelmatrix]]

This method takes the [arg pixelmatrix], a list of rows, with each row
a list of pixel values in the domain [lb]0..255[rb] and returns an
image of type [const grey8] whose height is the number of rows, i.e.
the length of the outer list, and whose width is the maximum length
found among the inner lists. Rows whose inner list is shorter than the
maximum length are padded with black pixels, i.e. a pixel value of
[const 255].


[call [cmd ::crimp] [method {read tcl float}] [arg pixelmatrix]]

This method takes the [arg pixelmatrix], a list of rows, with each row
a list of floating point values for pixel values and returns an image
of type [const float] whose height is the number of rows, i.e.  the
length of the outer list, and whose width is the maximum length found
among the inner lists. Rows whose inner list is shorter than the
maximum length are padded with a pixel value of [const 255].



[call [cmd ::crimp] [method {write 2string}] [arg format] [arg image]]
[call [cmd ::crimp] [method {write 2chan}]   [arg format] [arg chan] [arg image]]
[call [cmd ::crimp] [method {write 2file}]   [arg format] [arg path] [arg image]]

This family of methods either returns the input [arg image] as a
binary string in the specified [arg format], or writes this string to
the open channel [arg chan], or the named file at [arg path].

[para] The image types accepted for writing are [arg format]
dependent, and listed below, with the supported formats.

...TODO... write grey8/float?

[list_end]

[section {C API}]

TODO

[manpage_end]

