crimp_primitive convert_2grey8_float {
    image_float image
} image {
    /*
     * This converter maps from float to grey8 using identity. Values outside of
     * the destination range are clamped to the maximum and minimum values,
     * respectively. I.e. saturated arithmetic is used.
     *
     * FUTURE: Either extend this converter to take semi-arbitrary mapping
     * functions (concatenation of arbitrary polynomials), or make such
     * transformations a separate primitive we can handle under the 'map'
     * method.
     */

    crimp_image* result;
    int          x, y;


    result = crimp_new_grey8_at (crimp_x (image), crimp_y (image), crimp_w (image), crimp_h (image));

    for (y = 0; y < crimp_h (image); y++) {
        for (x = 0; x < crimp_w (image); x++) {
	    double f =  FLOATP(image, x, y);
	    GREY8 (result, x, y) = CLAMPT (MINVAL, int, f, MAXVAL_GREY8);
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
