[comment {-*- tcl -*- doctools manpage}]
[manpage_begin crimp_core n 0.2]
[include include/module.inc]
[titledesc {CRIMP - Foundation}]
[require Tcl 8.5]
[require crimp::core [opt 0.2]]
[keywords {image type}]
[keywords {image accessors}]
[description]

This package is the foundation for the whole of CRIMP, the C Raster
Image Manipulation Package.

[para] For a basic introduction of the whole CRIMP eco-system please read
the [term {CRIMP - Introduction to CRIMP}] (sic!).

[para]
As the foundation its location is in the bottom-most layer of the
system's architecture, as shown at

[para][image arch_core][para]

The core provides both C and Tcl level data types and accessors for
images, plus rudimentary IO capabilities (conversion to and
construction from matrices of numbers, represented by nested Tcl
lists).

[para]

The following sections first describe the basic concepts of the
system, like images and image types, general organization of the
command space, etc. After that follows a reference of the Tcl API
provided by the core. The C API is not really of interest to users
of CRIMP, only to developers wishing to extend the system. As such
it is not described here, but in separate manpages targeted at
developers and maintainers.

[section Images]

Images are values. This means that they have a string
representation. It is however strongly recommended to not access this
representation at all, and to only use the accessor commands provided
by crimp to obtain the information stored in the internal
representation of image values.

[para]

The reason behind this is simple: Memory and speed. Images can be
large. Generating the string representation from the internal one
roughly doubles the memory needed to store it, actually a bit more,
due to the necessary quoting of bytes in UTF-8 and list-quting them as
well. Furthermore such a conversion takes time, roughly proportional
to the size of the image itself, in either direction. Properly
accessing the image information without the package's accessor
commands requires list commands. This causes the loss of the internal
representation, thus forcing later a reconversion to the image's
internal represention when it is used as image again. I.e. the
shimmering forces us to convert twice.

[para]

Therefore, to avoid this, use only the crimp commands to access the
images. Even the raw pixel data is accessible in this manner. While
access to that in a Tcl script is, IMHO, highly unusual, there are
situations where it is beneficial. An example of such a situation are
the commands exporting images to raw portable any-maps (PNMs). Our
pixel data fits these formats exactly, and with access to it these
commands could be written in Tcl instead of requiring C level primitives.


[section {Image Types}]

Each image has a [term type], a string implicitly describing features
like the colorspace the image is in, the number of (color) channels,
the domain, i.e. bit-depth, of pixel values in the channels, etc.

[para]

All type strings have the form [const crimp::image::][var foo].

[para]

The package currently knows the following types:

[list_begin definitions]
[def [const rgba]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		4, named "red", "green", and "blue",
				plus an "alpha" channel controlling
				pixel opacity.
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const rgb]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		3, named "red", "green", and "blue".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const hsv]]
	[list_begin definitions]
	[def Colorspace]	HSV, also known as Hue, Saturation, and Value.
	[def Channels]		3, named "hue", "saturation", and "value".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const grey8]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	1 byte.
	[list_end]
[def [const grey16]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		2 byte/channel (16 bit, values 0-65,535).
	[def Pixel-size]	2 bytes.
	[list_end]
[def [const grey32]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		4 byte/channel (16 bit, values 0-4,294,967,296).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const bw]]
	[list_begin definitions]
	[def Colorspace]	Binary.
	[def Channels]		1, named "bw".
	[def Bit-depth]		1 bit/channel.
	[def Pixel-size]	1 byte. I.e. 7 bits/channel are wasted.
	[list_end]
[def [const float]]
	[list_begin definitions]
	[def Colorspace]	N.A / Floating Point.
	[def Channels]		1, named "value".
	[def Bit-depth]		4 byte/channel.
	[def Pixel-size]	4 byte.
	[list_end]
[def [const fpcomplex]]
	[list_begin definitions]
	[def Colorspace]	N.A / Floating Point.
	[def Channels]		2, named "real", and "imaginary".
	[def Bit-depth]		4 byte/channel.
	[def Pixel-size]	8 byte.
	[list_end]
[list_end]

Support for the various types varies by operation. The exact image
types supported by each operation will be listed in the operation's
description. Invoking an operation for a type it doesn't support will
generally cause it to throw an error.


[section {General design}]

All commands operate in a pipeline fashion, taking zero or more image
values, zero or more other arguments, and returning zero or more
images or other values. None are operating in place, i.e. taking an
image variable and writing back to it.

[para]

They fall into five categories, namely:

[para][image organization]

[list_begin definitions]
[def Accessors]

They take one or more images, extract information about them, and
return this information as their result. This can be a simple as
querying the image's height, to something as complex as counting pixel
values for a histogram.

[para]

The list of accessors, their syntax, and detailed meaning can be found
in section [sectref Accessors].

[def Manipulators]

These take an image and transform its contents in some way, leaving
the image type unchanged. Examples of commands in category are
inversion, gamma conversion, etc. They fall into two sub-categories,
manipulation of the image geometry, and of the intensity values or
colors.

[def Converters]

Similar to manipulators, except that they change the image's type,
preserving the content instead. Here reside operations like conversion
between the HSV and RGB colorspaces, to greyscale and back, etc.

[def I/O]

Another variant of the same theme, i.e. akin to converters and
manipulators, yet not the same, these commands read and write images
from and to files or other data structures. I.e. they convert between
different serializations of image content and type.

[para]

The list of I/O commands, their syntax, and detailed meaning can be
found in section [sectref {I/O commands}].


[def Support]

Lastly, but not leastly a number of commands, which, while not image
commands themselves, support the others.

[list_end]


The core package specified here provides only Accessors and
rudimentary I/O commands. All other sections are filled out by the
other packages of the CRIMP eco-system.


[section {Tcl API}]

[list_begin definitions]
[call [cmd ::crimp] [arg ...]]

Any and all functionality of CRIMP, regardless of which package
in the system provides it, will be made accessible through a
(set of) method(s) of this ensemble command.

[para] In other words, this command serves as the umbrella
underneath which anything else is arranged and made available.

[list_end]


[subsection Accessors]

[list_begin definitions]
[call [cmd ::crimp] [method channels] [arg image]]
[keywords channels]

This method returns a list containing the names of the channels in the
[arg image]. The order of channels is the same as expected by the
[method remap] method.

[para] The method supports all image types.


[call [cmd ::crimp] [method dimensions] [arg image]]
[keywords dimensions]

This method returns the width and height of the [arg image] (in
pixels).  The result is a 2-element list containing width and height,
in this order.

[para] The method supports all image types.


[call [cmd ::crimp] [method geometry] [arg image]]
[keywords geometry {bounding box}]

This method returns the [term geometry] of the [arg image] (in
pixels). The result is a 4-element list containing x-, y-location,
width and height, in this order. This is also called the
[term {bounding box}] of the image.

[para] The method supports all image types.


[call [cmd ::crimp] [method height] [arg image]]

This method returns the height of the [arg image] (in pixels).

[para] The method supports all image types.

[call [cmd ::crimp] [method {meta append}] [arg image] [arg key] [opt [arg string]...]]
[call [cmd ::crimp] [method {meta create}] [arg image] [opt "[arg key] [arg value]..."]]
[call [cmd ::crimp] [method {meta exists}] [arg image] [arg key] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta filter}] [arg image] [arg args]...]
[call [cmd ::crimp] [method {meta for}] [arg image] \{[arg keyVar] [arg valueVar]\} [arg body]]
[call [cmd ::crimp] [method {meta get}] [arg image] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta incr}] [arg image] [arg key] [opt [arg increment]]]
[call [cmd ::crimp] [method {meta info}] [arg image]]
[call [cmd ::crimp] [method {meta keys}] [arg image] [opt [arg globPattern]]]
[call [cmd ::crimp] [method {meta lappend}] [arg image] [arg key] [opt [arg value]...]]
[call [cmd ::crimp] [method {meta merge}] [arg image] [opt [arg dictionaryValue]...]]
[call [cmd ::crimp] [method {meta remove}] [arg image] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta replace}] [arg image] [opt "[arg key] [arg value]..."]]
[call [cmd ::crimp] [method {meta set}] [arg image] [arg key] [opt [arg key]...] [arg value]]
[call [cmd ::crimp] [method {meta size}] [arg image]]
[call [cmd ::crimp] [method {meta unset}] [arg image] [arg key] [opt [arg key]...]]
[call [cmd ::crimp] [method {meta values}] [arg image] [opt [arg globPattern]]]

These methods provide access to the meta data slot of images, treating
its contents as a dictionary. As such all the methods provided here
have an appropriate counterpart in the methods of Tcl's builtin
command [cmd dict], with the image's metadata taking the place of the
dictionary value or vqariable.

The converse is not true, as [cmd dict]'s methods [method update] and
[method with] are not supported here.

[para] Please read the documentation of Tcl's [cmd dict] command for reference.

[para] [emph NOTE] that the toplevel key [const crimp] is reserved for
use by CRIMP itself.


[call [cmd ::crimp] [method pixel] [arg image]]

This method returns the raw pixels of the [arg image] as a Tcl ByteArray.

[para] The method supports all image types.

[call [cmd ::crimp] [method type] [arg image]]

This method returns the type of the [arg image].

[para] The method supports all image types.

[call [cmd ::crimp] [method width] [arg image]]

This method returns the width of the [arg image] (in pixels).

[para] The method supports all image types.

[list_end]

[subsection {Math}]

Currently the only core math operations are various linear and
cubic interpolations, as listed below. They all exist within
the [cmd {crimp interpolate}] ensemble. All arguments are
double-precision floating point, as is the result.

[list_begin definitions]

[call [cmd ::crimp] [method {interpolate linear}] \
     [arg a] [arg b] \
     [arg x]]

Linear interpolation between points A and B, with values
[arg a] and [arg b]. [arg x] is the fractional location
between the two points, with "[arg x]==0" mapping to
[arg a], and "[arg x]==1" mapping to [arg b].

[para] [arg x] outside of the interval [lb]0,1[rb] is
allowed and can be useful.

[para] Note that within the interval [lb]0,1[rb] the
result of the interpolation is a value in the interval
[lb][arg a],[arg b][rb].

[call [cmd ::crimp] [method {interpolate bilinear}] \
     [arg a] [arg b] \
     [arg c] [arg d] \
     [arg x] [arg y]]

Bilinear interpolation over the square
[example {
    A--B
    |  |
    C--D
}]
with corresponding values [arg a] ... [arg d].

[arg x] is the fractional location along the x-axis, while
[arg y] is the fractional location along the y-axis.

[para] [arg x]  and [arg y] outside of the interval [lb]0,1[rb] are
allowed and may be useful.

[para] Note that within the interval [lb]0,1[rb] the
result of the interpolation is a value in the interval
[lb]min([arg a],...,[arg d]),max([arg a],...,[arg d])[rb].

[para] Note while the interpolation is linear when one of the
x- or y-axes is kept constant the bilinear interpolation as a
whole is [emph not] linear, but quadratic.

[para] Conceptually bilinear interpolation is the same as
[example {
    linear ( linear (a, b, x),
	     linear (c, d, x),
	     y)
}]

[call [cmd ::crimp] [method {interpolate trilinear}] \
     [arg a] [arg b] [arg c] [arg d] \
     [arg e] [arg f] [arg g] [arg h] \
     [arg x] [arg y] [arg z]]

Trilinear interpolation over the cube
[example {
      E--F
     /| /|
    A--B H
    |/ |/
    C--D
}]
with corresponding values [arg a] ... [arg h].
Note that point G in the graphic is hidden behind the edges of the cube.

[arg x] is the fractional location along the x-axis, while
[arg y] is the fractional location along the y-axis, while
[arg z] is the fractional location along the z-axis.

[para] [arg x]  and [arg y] outside of the interval [lb]0,1[rb] are
allowed and may be useful.

[para] Note that within the interval [lb]0,1[rb] the
result of the interpolation is a value in the interval
[lb]min([arg a],...,[arg h]),max([arg a],...,[arg h])[rb].

[para] Note while the interpolation is linear when two of the axes
(x, y, or z) are kept constant the trilinear interpolation as a
whole is [emph not] linear, but cubic.

[para] Conceptually trilinear interpolation is the same as
[example {
    linear ( bilinear (a, b, c, d, x, y),
	     bilinear (e, f, g, h, x, y),
	     z)
}]

[call [cmd ::crimp] [method {interpolate cubic}] \
     [arg a] [arg b] [arg c] [arg d] \
     [arg x]]

Cubic interpolation between points B and C, with values
[arg b] and [arg c]. [arg x] is the fractional location
between the two points. The points A and D with associated
values are before B and after C, they provide the information
from which to compute the function's derivatives needed
for the cubic.

[para] While a value of [arg x] outside of the interval [lb]0,1[rb] is
allowed the result is likely not useful.


[call [cmd ::crimp] [method {interpolate bicubic}] \
     [arg a] [arg b] [arg c] [arg d] \
     [arg e] [arg f] [arg g] [arg h] \
     [arg i] [arg j] [arg k] [arg l] \
     [arg m] [arg n] [arg o] [arg p] \
     [arg x] [arg y]]

Bicubic interpolation over the patch
[example {
    A--B--C--D
    |  |  |  |
    E--F--G--H
    |  |  |  |
    I--J--K--L
    |  |  |  |
    M--N--O--P
}]
with corresponding values [arg a] ... [arg p].

[arg x] is the fractional location along the x-axis, while
[arg y] is the fractional location along the y-axis, within
the square
[example {
    F--G
    |  |
    J--K
}]

[para] While values of [arg x]  and [arg y] outside of the
interval [lb]0,1[rb] are allowed the result is likely not
useful.

[para] Conceptually bicubic interpolation is the same as
[example {
    cubic ( cubic (a, b, c, d, x),
	    cubic (e, f, g, h, x),
	    cubic (i, j, k, l, x),
	    cubic (m, n, o, p, x),
	    y)
}]

[list_end]

[subsection {I/O commands}]
[list_begin definitions]

[call [cmd ::crimp] [method read] [arg ...]]

This ensemble command is the umbrella underneath which any and all
functionality for reading images from external formats must be placed.

[para] This command is an [term {extension point}]. I.e., other packages
are allowed to extend this ensemble by providing commands of the form
[cmd ::crimp::read::[var FOO]], where [term FOO] should be the name of
the format the command is able to read, or related to it.

Note that only commands beginning with a lower-case alphanumerical
character, i.e. [lb]a-z0-9[rb] will be exported by the ensemble. This
means that it is possible to put private helper commands into the
[namespace ::crimp::read] namespace which will not be visible to the user,
by naming them appropriately. However, even so it is recommended to put
private commands into a sub-namespace instead, named after the package
in question, to reduce the probability of naming conflicts.

[para] The commands used to extend the ensemble are not restricted in
their argument signature, although they are expected to return an image.

[para] This package provides only rudimentary import facilities from
Tcl data structures, as described next.


[call [cmd ::crimp] [method {read tcl grey8}] [arg pixelmatrix]]

This method takes the [arg pixelmatrix], a list of rows, with each row
a list of pixel values in the domain [lb]0..255[rb] and returns an
image of type [const grey8] whose height is the number of rows, i.e.
the length of the outer list, and whose width is the maximum length
found among the inner lists. Rows whose inner list is shorter than the
maximum length are padded with black pixels, i.e. a pixel value of
[const 0].


[call [cmd ::crimp] [method {read tcl grey16}] [arg pixelmatrix]]
[call [cmd ::crimp] [method {read tcl grey32}] [arg pixelmatrix]]

These methods are like [cmd ::crimp] [method {read tcl grey8}], except
that the resulting image is of the named type, and the range of input
values is suitably extended, to [lb]0..65535[rb], and [lb]0..4294967295[rb]
respectively.


[call [cmd ::crimp] [method {read tcl float}] [arg pixelmatrix]]

This method takes the [arg pixelmatrix], a list of rows, with each row
a list of floating point values for pixel values and returns an image
of type [const float] whose height is the number of rows, i.e.  the
length of the outer list, and whose width is the maximum length found
among the inner lists. Rows whose inner list is shorter than the
maximum length are padded with a pixel value of [const 0].


[call [cmd ::crimp] [method {read tcl fpcomplex}] [arg pixelmatrix]]

This methods is like [cmd ::crimp] [method {read tclfloat}], except
that the resulting image is of the named type and each pixel of the
[arg pixelmatrix] is a 2-tuple of floating point numbers for the real
and imaginary parts, respectively.

[para][emph Note] that tuples with less than 2 values are extended to
proper size by adding zeros, and that for tuples larger than 2 elements
the excess elements are ignored.

[call [cmd ::crimp] [method {read tcl rgb}] [arg pixelmatrix]]
[call [cmd ::crimp] [method {read tcl rgba}] [arg pixelmatrix]]
[call [cmd ::crimp] [method {read tcl hsv}] [arg pixelmatrix]]

These methods are like [cmd ::crimp] [method {read tcl grey8}], except
that the resulting image is of the named type,  and each pixel of the
[arg pixelmatrix] is a 3-tuple (4-tuple for rgba) of integers in the
domain [lb]0..255[rb]

[para][emph Note] that tuples with less than 3 (4) values are extended to
proper size by adding zeros, and that for tuples larger than 3 (4) elements
the excess elements are ignored.

[call [cmd ::crimp] [method write] [arg ...]]

This ensemble command is the umbrella underneath which any and all
functionality for writing images to external formats must be placed.

[para] This command is an [term {extension point}]. I.e., other packages
are allowed to extend this ensemble by providing commands of the form
[cmd ::crimp::write::[var FOO]], where [term FOO] should be the name of
the format the command is able to write, or related to it.

Note that only commands beginning with a lower-case alphanumerical
character, i.e. [lb]a-z0-9[rb] will be exported by the ensemble. This
means that it is possible to put private helper commands into the
[namespace ::crimp::write] namespace which will not be visible to the user,
by naming them appropriately. However, even so it is recommended to put
private commands into a sub-namespace instead, named after the package
in question, to reduce the probability of naming conflicts.

[para] The commands used to extend the ensemble are not restricted in
their argument signature, although they are expected to take at least
an image as argument.


[call [cmd ::crimp] [method {write 2string}] [arg format] [arg image]]
[call [cmd ::crimp] [method {write 2chan}]   [arg format] [arg chan] [arg image]]
[call [cmd ::crimp] [method {write 2file}]   [arg format] [arg path] [arg image]]

This family of methods extends the basic [cmd {::crimp write}] ensemble.
The input [arg image] is returned as either a binary string in the
specified [arg format], or written to the open channel [arg chan], or
the named file at [arg path].

[para] By default the only supported format is [const tcl], a
representation of an image as a nested Tcl list. This format supports,
i.e. accepts, images with the types [const grey8], [const grey16],
[const grey32], [const rga], [const rgba], [const hsv], [const float],
and [const fpcomplex] for export.

[para] This family of commands is an [term {extension point}]. Other packages
can extend it to support additional formats by providing commands of the
form [cmd ::crimp::write::Str_[var FOO]_[var TYPE]]
and  [cmd ::crimp::write::Chan_[var FOO]_[var TYPE]]

where [var FOO] is the name of the format, to specify as the argument
[arg format], and [var TYPE] the type of image handled by the command.

[para] Note that the [const Chan_] form is optional. If this form is missing
the system will use the [const Str_] form to convert the image before
writing it to channel or file.

[para] The commands must match the following signatures:

[list_begin definitions]
[def "[cmd Str_...] [arg image]"]
[def "[cmd Chan_...] [arg channel] [arg image]"]
[list_end]

[list_end]


[subsection Support]

[list_begin definitions]
[call [cmd ::crimp] [method bbox] [arg image]...]

This method takes one or more images and computes the union of their
geometries. The result is returned as a bounding box, a list of 4
numbers (x, y, width, and height).

[call [cmd ::crimp] [method bbox2] [arg box1] [arg box2]]

This method takes two bounding boxes (lists of 4 numbers (x, y, width,
and height)) and returns their union bounding box.

[list_end]


[section {C API}]

The C API of the core is of no interest to users of CRIMP, the audience
towards which this manpage is geared to.

[manpage_end]

