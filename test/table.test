# -*- tcl -*-
# -------------------------------------------------------------------------

source [file join \
            [file dirname [file join [pwd] [info script]]] \
            testutilities.tcl]

testsNeedTcl     8.5
testsNeedTcltest 2

support { useLocalFile synth.tcl }
support { useC [mainPath _test/lib]/crimp_core* crimp::core no }
testing { useC [mainPath _test/lib]/crimp*      crimp       no }

# -------------------------------------------------------------------------
## Supporting commands, mapping tables and images.
# -------------------------------------------------------------------------

test crimp-table-1.0 {image tables, wrong\#args, not enough} -body {
    crimp table
} -returnCodes error -result {wrong # args: should be "crimp table subcommand ?argument ...?"}

test crimp-table-1.1 {image tables, invalid method} -body {
    crimp table BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be compose, degamma, eval, fgauss, gamma, gauss, identity, invers, linear, log, quantize, solarize, sqrt, stretch, or threshold}

# -------------------------------------------------------------------------

test crimp-table-2.0 {image tables, eval, wrong\#args, not enough} -body {
    crimp table eval
} -returnCodes error -result {wrong # args: should be "crimp table eval subcommand ?argument ...?"}

test crimp-table-2.1 {image tables, eval, invalid method} -body {
    crimp table eval BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be clamp, or wrap}

# -------------------------------------------------------------------------

test crimp-table-3.0 {image tables, eval wrap, wrong\#args, not enough} -body {
    crimp table eval wrap
} -returnCodes error -result {wrong # args: should be "crimp table eval wrap cmdprefix"}

test crimp-table-3.1 {image tables, eval wrap, wrong\#args, too many} -body {
    crimp table eval wrap CMD bogus
} -returnCodes error -result {wrong # args: should be "crimp table eval wrap cmdprefix"}

test crimp-table-3.2 {image tables, eval wrap} -body {
    list [crimp table eval wrap {apply {{x} {
        global in out

        set z [expr {10*($x - 10)}]

        lappend in $x
        lappend out $z
        return $z
    }}}] $in $out
    # compare table-4.2
} -cleanup {
    unset in out
} -result [list \
               [list  155 165 175 185 195 205 215 225 235 245  0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250   5  15  25  35  45  55  65  75  85  95 105 115 125 135 145 155 165 175 185 195 205 215 225 235 245 255  10  20  30  40  50  60  70  80  90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250  5   15  25  35  45  55  65  75  85  95 105 115 125 135 145 155 165 175 185 195 205 215 225 235 245 255 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 5 15 25 35 45 55 65 75 85 95 105 115 125 135 145 155 165 175 185 195 205 215 225 235 245 255 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 5 15 25 35 45 55 65 75 85 95 105 115 125 135 145 155 165 175 185 195 205 215 225 235 245 255 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 5 15 25 35 45 55 65 75 85 95 105 115 125 135 145 155] \
               [list    0   1   2   3   4   5   6   7   8   9 10 11 12 13 14 15 16 17 18 19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255] \
               [list -100 -90 -80 -70 -60 -50 -40 -30 -20 -10  0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610 620 630 640 650 660 670 680 690 700 710 720 730 740 750 760 770 780 790 800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990 1000 1010 1020 1030 1040 1050 1060 1070 1080 1090 1100 1110 1120 1130 1140 1150 1160 1170 1180 1190 1200 1210 1220 1230 1240 1250 1260 1270 1280 1290 1300 1310 1320 1330 1340 1350 1360 1370 1380 1390 1400 1410 1420 1430 1440 1450 1460 1470 1480 1490 1500 1510 1520 1530 1540 1550 1560 1570 1580 1590 1600 1610 1620 1630 1640 1650 1660 1670 1680 1690 1700 1710 1720 1730 1740 1750 1760 1770 1780 1790 1800 1810 1820 1830 1840 1850 1860 1870 1880 1890 1900 1910 1920 1930 1940 1950 1960 1970 1980 1990 2000 2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130 2140 2150 2160 2170 2180 2190 2200 2210 2220 2230 2240 2250 2260 2270 2280 2290 2300 2310 2320 2330 2340 2350 2360 2370 2380 2390 2400 2410 2420 2430 2440 2450]]

# -------------------------------------------------------------------------

test crimp-table-4.0 {image tables, eval clamp, wrong\#args, not enough} -body {
    crimp table eval clamp
} -returnCodes error -result {wrong # args: should be "crimp table eval clamp cmdprefix"}

test crimp-table-4.1 {image tables, eval clamp, wrong\#args, too many} -body {
    crimp table eval clamp CMD bogus
} -returnCodes error -result {wrong # args: should be "crimp table eval clamp cmdprefix"}

test crimp-table-4.2 {image tables, eval clamp} -body {
    list [crimp table eval clamp {apply {{x} {
        global in out

        set z [expr {10*($x - 10)}]

        lappend in $x
        lappend out $z
        return $z
    }}}] $in $out
    # compare table-3.2
} -cleanup {
    unset in out
} -result [list \
               [list    0   0   0   0   0   0   0   0   0   0  0   10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250   255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255  255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255] \
               [list    0   1   2   3   4   5   6   7   8   9 10   11 12 13 14 15 16 17 18 19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35    36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109  110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255] \
               [list -100 -90 -80 -70 -60 -50 -40 -30 -20 -10  0   10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250   260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610 620 630 640 650 660 670 680 690 700 710 720 730 740 750 760 770 780 790 800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990 1000 1010 1020 1030 1040 1050 1060 1070 1080 1090 1100 1110 1120 1130 1140 1150 1160 1170 1180 1190 1200 1210 1220 1230 1240 1250 1260 1270 1280 1290 1300 1310 1320 1330 1340 1350 1360 1370 1380 1390 1400 1410 1420 1430 1440 1450 1460 1470 1480 1490 1500 1510 1520 1530 1540 1550 1560 1570 1580 1590 1600 1610 1620 1630 1640 1650 1660 1670 1680 1690 1700 1710 1720 1730 1740 1750 1760 1770 1780 1790 1800 1810 1820 1830 1840 1850 1860 1870 1880 1890 1900 1910 1920 1930 1940 1950 1960 1970 1980 1990 2000 2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130 2140 2150 2160 2170 2180 2190 2200 2210 2220 2230 2240 2250 2260 2270 2280 2290 2300 2310 2320 2330 2340 2350 2360 2370 2380 2390 2400 2410 2420 2430 2440 2450]]

# -------------------------------------------------------------------------

test crimp-table-5.0 {image tables, compose, wrong\#args, not enough} -body {
    crimp table compose
} -returnCodes error -result {wrong # args: should be "crimp table compose f g"}

test crimp-table-5.1 {image tables, compose, wrong\#args, not enough} -body {
    crimp table compose F
} -returnCodes error -result {wrong # args: should be "crimp table compose f g"}

test crimp-table-5.2 {image tables, compose, wrong\#args, too many} -body {
    crimp table compose F G bogus
} -returnCodes error -result {wrong # args: should be "crimp table compose f g"}

test crimp-table-5.3 {image tables, compose} -body {
    crimp table compose \
        [crimp table identity] \
        [crimp table invers]
} -result [lreverse [iota 256]] ; # identity after inverse = inverse

test crimp-table-5.3 {image tables, compose} -body {
    crimp table compose \
        [crimp table invers] \
        [crimp table invers]
} -result [iota 256] ; # double inverse = identity

# -------------------------------------------------------------------------

test crimp-table-6.0 {image tables, identity, wrong\#args, too many} -body {
    crimp table identity BOGUS
} -returnCodes error -result {wrong # args: should be "crimp table identity"}

test crimp-table-6.1 {image tables, identity} -body {
    crimp table identity
} -result [iota 256]

# -------------------------------------------------------------------------

test crimp-table-7.0 {image tables, invers, wrong\#args, too many} -body {
    crimp table invers BOGUS
} -returnCodes error -result {wrong # args: should be "crimp table invers"}

test crimp-table-7.1 {image tables, invers} -body {
    crimp table invers
} -result [lreverse [iota 256]]

# -------------------------------------------------------------------------

test crimp-table-8.0 {image tables, solarize, wrong\#args, not enough} -body {
    crimp table solarize
} -returnCodes error -result {wrong # args: should be "crimp table solarize n"}

test crimp-table-8.1 {image tables, solarize, wrong\#args, too many} -body {
    crimp table solarize N bogus
} -returnCodes error -result {wrong # args: should be "crimp table solarize n"}

test crimp-table-8.2 {image tables, solarize} -body {
    crimp table solarize 0
} -result [lreverse [iota 256]]

test crimp-table-8.3 {image tables, solarize} -body {
    crimp table solarize 1
} -result [concat 0 [lreverse [iota 255]]]

test crimp-table-8.4 {image tables, solarize} -body {
    crimp table solarize -1
} -result [lreverse [iota 256]]

test crimp-table-8.5 {image tables, solarize} -body {
    crimp table solarize 128
} -result [concat [iota 128] [lreverse [iota 128]]]

test crimp-table-8.6 {image tables, solarize} -body {
    crimp table solarize 255
} -result [concat [iota 255] 0]

test crimp-table-8.7 {image tables, solarize} -body {
    crimp table solarize 256
} -result [iota 256]

test crimp-table-8.8 {image tables, solarize} -body {
    crimp table solarize 254
} -result [concat [iota 254] {1 0}]

# -------------------------------------------------------------------------

test crimp-table-9.0 {image tables, gamma, wrong\#args, not enough} -body {
    crimp table gamma
} -returnCodes error -result {wrong # args: should be "crimp table gamma y"}

test crimp-table-9.1 {image tables, gamma, wrong\#args, too many} -body {
    crimp table gamma Y bogus
} -returnCodes error -result {wrong # args: should be "crimp table gamma y"}

# TODO: gamma

# -------------------------------------------------------------------------

test crimp-table-10.0 {image tables, degamma, wrong\#args, too many} -body {
    crimp table degamma
} -returnCodes error -result {wrong # args: should be "crimp table degamma y"}

test crimp-table-10.1 {image tables, degamma, wrong\#args, too many} -body {
    crimp table degamma Y bogus
} -returnCodes error -result {wrong # args: should be "crimp table degamma y"}

# TODO: degamma

# -------------------------------------------------------------------------

test crimp-table-11.0 {image tables, sqrt, wrong\#args, too many} -body {
    crimp table sqrt MAX bogus
} -returnCodes error -result {wrong # args: should be "crimp table sqrt ?max?"}

# TODO: sqrt

# -------------------------------------------------------------------------

test crimp-table-12.0 {image tables, log, wrong\#args, too many} -body {
    crimp table log MAX bogus
} -returnCodes error -result {wrong # args: should be "crimp table log ?max?"}

# TODO: log

# -------------------------------------------------------------------------

test crimp-table-13.0 {image tables, linear, wrong\#args, not enough} -body {
    crimp table linear
} -returnCodes error -result {wrong # args: should be "crimp table linear subcommand ?argument ...?"}

test crimp-table-13.1 {image tables, linear, invalid method} -body {
    crimp table linear BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be clamp, or wrap}

# -------------------------------------------------------------------------

test crimp-table-14.0 {image tables, linear wrap, wrong\#args, not enough} -body {
    crimp table linear wrap
} -returnCodes error -result {wrong # args: should be "crimp table linear wrap gain offset"}

test crimp-table-14.1 {image tables, linear wrap, wrong\#args, not enough} -body {
    crimp table linear wrap GAIN
} -returnCodes error -result {wrong # args: should be "crimp table linear wrap gain offset"}

test crimp-table-14.2 {image tables, linear wrap, wrong\#args, too many} -body {
    crimp table linear wrap GAIN OFFSET bogus
} -returnCodes error -result {wrong # args: should be "crimp table linear wrap gain offset"}

# TODO: linear wrap

# -------------------------------------------------------------------------

test crimp-table-15.0 {image tables, linear clamp, wrong\#args, not enough} -body {
    crimp table linear clamp
} -returnCodes error -result {wrong # args: should be "crimp table linear clamp gain offset"}

test crimp-table-15.1 {image tables, linear clamp, wrong\#args, not enough} -body {
    crimp table linear clamp GAIN
} -returnCodes error -result {wrong # args: should be "crimp table linear clamp gain offset"}

test crimp-table-15.2 {image tables, linear clamp, wrong\#args, too many} -body {
    crimp table linear clamp GAIN OFFSET bogus
} -returnCodes error -result {wrong # args: should be "crimp table linear clamp gain offset"}

# TODO: linear clamp

# -------------------------------------------------------------------------

test crimp-table-16.0 {image tables, stretch, wrong\#args, not enough} -body {
    crimp table stretch
} -returnCodes error -result {wrong # args: should be "crimp table stretch min max"}

test crimp-table-16.1 {image tables, stretch, wrong\#args, not enough} -body {
    crimp table stretch MIN
} -returnCodes error -result {wrong # args: should be "crimp table stretch min max"}

test crimp-table-16.2 {image tables, stretch, wrong\#args, too many} -body {
    crimp table stretch MIN MAX bogus
} -returnCodes error -result {wrong # args: should be "crimp table stretch min max"}

# TODO: stretch

# -------------------------------------------------------------------------

test crimp-table-17.0 {image tables, threshold, wrong\#args, too many} -body {
    crimp table threshold
} -returnCodes error -result {wrong # args: should be "crimp table threshold subcommand ?argument ...?"}

test crimp-table-17.1 {image tables, threshold, invalid method} -body {
    crimp table threshold BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be above, below, inside, or outside}

# -------------------------------------------------------------------------

test crimp-table-18.0 {image tables, threshold above, wrong\#args, not enough} -body {
    crimp table threshold above
} -returnCodes error -result {wrong # args: should be "crimp table threshold above threshold"}

test crimp-table-18.1 {image tables, threshold above, wrong\#args, too many} -body {
    crimp table threshold above T bogus
} -returnCodes error -result {wrong # args: should be "crimp table threshold above threshold"}

# TODO: threshold above

# -------------------------------------------------------------------------

test crimp-table-19.0 {image tables, threshold below, wrong\#args, not enough} -body {
    crimp table threshold below
} -returnCodes error -result {wrong # args: should be "crimp table threshold below threshold"}

test crimp-table-19.1 {image tables, threshold below, wrong\#args, too many} -body {
    crimp table threshold below T bogus
} -returnCodes error -result {wrong # args: should be "crimp table threshold below threshold"}

# TODO: threshold below

# -------------------------------------------------------------------------

test crimp-table-20.0 {image tables, threshold inside, wrong\#args, not enough} -body {
    crimp table threshold inside
} -returnCodes error -result {wrong # args: should be "crimp table threshold inside min max"}

test crimp-table-20.1 {image tables, threshold inside, wrong\#args, not enough} -body {
    crimp table threshold inside MIN
} -returnCodes error -result {wrong # args: should be "crimp table threshold inside min max"}

test crimp-table-20.2 {image tables, threshold inside, wrong\#args, too many} -body {
    crimp table threshold inside MIN MAX bogus
} -returnCodes error -result {wrong # args: should be "crimp table threshold inside min max"}

# TODO: threshold inside

# -------------------------------------------------------------------------

test crimp-table-21.0 {image tables, threshold outside, wrong\#args, not enough} -body {
    crimp table threshold outside
} -returnCodes error -result {wrong # args: should be "crimp table threshold outside min max"}

test crimp-table-21.1 {image tables, threshold outside, wrong\#args, not enough} -body {
    crimp table threshold outside MIN
} -returnCodes error -result {wrong # args: should be "crimp table threshold outside min max"}

test crimp-table-21.2 {image tables, threshold outside, wrong\#args, too many} -body {
    crimp table threshold outside MIN MAX bogus
} -returnCodes error -result {wrong # args: should be "crimp table threshold outside min max"}

# TODO: threshold outside

# -------------------------------------------------------------------------

test crimp-table-22.0 {image tables, gauss, wrong\#args, not enough} -body {
    crimp table gauss
} -returnCodes error -result {wrong # args: should be "crimp table gauss sigma"}

test crimp-table-22.1 {image tables, gauss, wrong\#args, too many} -body {
    crimp table gauss SIGMA bogus
} -returnCodes error -result {wrong # args: should be "crimp table gauss sigma"}

# TODO: gauss

# -------------------------------------------------------------------------

test crimp-table-23.0 {image tables, fgauss, wrong\#args, not enough} -body {
    crimp table fgauss
} -returnCodes error -result {wrong # args: should be "crimp table fgauss subcommand ?argument ...?"}

test crimp-table-23.1 {image tables, fgauss, invalid method} -body {
    crimp table fgauss BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be discrete, or sampled}

# -------------------------------------------------------------------------

test crimp-table-24.0 {image tables, fgauss discrete, wrong\#args, not enough} -body {
    crimp table fgauss discrete
} -returnCodes error -result {wrong # args: should be "crimp table fgauss discrete sigma ?r?"}

test crimp-table-24.1 {image tables, fgauss discrete, wrong\#args, too many} -body {
    crimp table fgauss discrete SIGMA R bogus
} -returnCodes error -result {wrong # args: should be "crimp table fgauss discrete sigma ?r?"}

# TODO: fgauss discrete

# -------------------------------------------------------------------------

test crimp-table-25.0 {image tables, fgauss sampled, wrong\#args, not enough} -body {
    crimp table fgauss sampled
} -returnCodes error -result {wrong # args: should be "crimp table fgauss sampled sigma ?r?"}

test crimp-table-25.1 {image tables, fgauss sampled, wrong\#args, too many} -body {
    crimp table fgauss sampled SIGMA R bogus
} -returnCodes error -result {wrong # args: should be "crimp table fgauss sampled sigma ?r?"}

# TODO: fgauss sampled

# -------------------------------------------------------------------------

test crimp-table-26.0 {image tables, quantize, wrong\#args, not enough} -body {
    crimp table quantize
} -returnCodes error -result {wrong # args: should be "crimp table quantize subcommand ?argument ...?"}

test crimp-table-26.1 {image tables, quantize, invalid method} -body {
    crimp table quantize BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be histogram}

# -------------------------------------------------------------------------

test crimp-table-27.0 {image tables, quantize histogram, wrong\#args, not enough} -body {
    crimp table quantize histogram
} -returnCodes error -result {wrong # args: should be "crimp table quantize histogram n p h"}

test crimp-table-27.1 {image tables, quantize histogram, wrong\#args, not enough} -body {
    crimp table quantize histogram N
} -returnCodes error -result {wrong # args: should be "crimp table quantize histogram n p h"}

test crimp-table-27.2 {image tables, quantize histogram, wrong\#args, not enough} -body {
    crimp table quantize histogram N P
} -returnCodes error -result {wrong # args: should be "crimp table quantize histogram n p h"}

test crimp-table-27.3 {image tables, quantize histogram, wrong\#args, too many} -body {
    crimp table quantize histogram N P H bogus
} -returnCodes error -result {wrong # args: should be "crimp table quantize histogram n p h"}

# TODO: quantize histogram

# -------------------------------------------------------------------------
testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
