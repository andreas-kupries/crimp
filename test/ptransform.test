# -*- tcl -*-
# -------------------------------------------------------------------------

source [file join \
            [file dirname [file join [pwd] [info script]]] \
            testutilities.tcl]

testsNeedTcl     8.5
testsNeedTcltest 2

support { useLocalFile synth.tcl }
support { useC [mainPath _test/lib]/crimp_core* crimp::core no }
testing { useC [mainPath _test/lib]/crimp*      crimp       no }

# -------------------------------------------------------------------------
## Supporting commands, creation and manipulation of projective transforms.
##
## Note: Transforms are 2-element Tcl lists (type tag + 3x3 float image).
##       The second element contains the transform matrix.
# -------------------------------------------------------------------------

test crimp-proj-transform-1.0 {projective transforms, wrong\#args, not enough} -body {
    crimp transform
} -returnCodes error -result {wrong # args: should be "crimp transform subcommand ?argument ...?"}

test crimp-proj-transform-1.1 {projective transforms, invalid method} -body {
    crimp transform BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be affine, chain, identity, invert, projective, quadrilateral, reflect, rotate, scale, shear, or translate}

# -------------------------------------------------------------------------

test crimp-proj-transform-2.0 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.1 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.2 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.3 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B C
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.4 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B C D
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.5 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B C D E
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.6 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B C D E F
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.7 {projective transforms, raw projective, wrong\#args, not enough} -body {
    crimp transform projective A B C D E F G
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.8 {projective transforms, raw projective, wrong\#args, too many} -body {
    crimp transform projective A B C D E F G H toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform projective a b c d e f g h"}

test crimp-proj-transform-2.9 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective A B C D E F G H
} -returnCodes error -result {expected floating-point number but got "A"}

test crimp-proj-transform-2.10 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 B C D E F G H
} -returnCodes error -result {expected floating-point number but got "B"}

test crimp-proj-transform-2.11 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 C D E F G H
} -returnCodes error -result {expected floating-point number but got "C"}

test crimp-proj-transform-2.12 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 0 D E F G H
} -returnCodes error -result {expected floating-point number but got "D"}

test crimp-proj-transform-2.13 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 0 0 E F G H
} -returnCodes error -result {expected floating-point number but got "E"}

test crimp-proj-transform-2.14 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 0 0 0 F G H
} -returnCodes error -result {expected floating-point number but got "F"}

test crimp-proj-transform-2.15 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 0 0 0 0 G H
} -returnCodes error -result {expected floating-point number but got "G"}

test crimp-proj-transform-2.16 {projective transforms, raw projective, invalid arguments} -body {
    crimp transform projective 0 0 0 0 0 0 0 H
} -returnCodes error -result {expected floating-point number but got "H"}

test crimp-proj-transform-2.17 {projective transforms, raw projective} -body {
    astclf 1 [crimp transform projective 0  2  3  4  5  6  7  8]
    #                                    sx          sy          scale
    #                                          tx       ty       translate
    #                                    r  r     r  r           rotate
    #                                                      sx sy shear
} -result [tconst {
    0.0 2.0 3.0
    4.0 5.0 6.0
    7.0 8.0 1.0
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-3.0 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.1 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine A
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.2 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine A B
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.3 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine A B C
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.4 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine A B C D
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.5 {projective transforms, raw affine, wrong\#args, not enough} -body {
    crimp transform affine A B C D E
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.6 {projective transforms, raw affine, wrong\#args, too many} -body {
    crimp transform affine A B C D E F toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform affine a b c d e f"}

test crimp-proj-transform-3.7 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine A B C D E F
} -returnCodes error -result {expected floating-point number but got "A"}

test crimp-proj-transform-3.8 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine 0 B C D E F
} -returnCodes error -result {expected floating-point number but got "B"}

test crimp-proj-transform-3.9 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine 0 0 C D E F
} -returnCodes error -result {expected floating-point number but got "C"}

test crimp-proj-transform-3.10 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine 0 0 0 D E F
} -returnCodes error -result {expected floating-point number but got "D"}

test crimp-proj-transform-3.11 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine 0 0 0 0 E F
} -returnCodes error -result {expected floating-point number but got "E"}

test crimp-proj-transform-3.12 {projective transforms, raw affine, invalid arguments} -body {
    crimp transform affine 0 0 0 0 0 F
} -returnCodes error -result {expected floating-point number but got "F"}

test crimp-proj-transform-3.13 {projective transforms, raw affine} -body {
    astclf 1 [crimp transform affine 0  2  3  4  5  6]
    #                                sx          sy          scale
    #                                      tx       ty       translate
    #                                r  r     r  r           rotate
} -result [tconst {
    0.0 2.0 3.0
    4.0 5.0 6.0
    0.0 0.0 1.0
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-4.0 {projective transforms, translate, wrong\#args, not enough} -body {
    crimp transform translate
} -returnCodes error -result {wrong # args: should be "crimp transform translate dx dy"}

test crimp-proj-transform-4.1 {projective transforms, translate, wrong\#args, not enough} -body {
    crimp transform translate DX
} -returnCodes error -result {wrong # args: should be "crimp transform translate dx dy"}

test crimp-proj-transform-4.2 {projective transforms, translate, wrong\#args, too many} -body {
    crimp transform translate DX DY toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform translate dx dy"}

test crimp-proj-transform-4.3 {projective transforms, translate, invalid arguments} -body {
    crimp transform translate DX DY
} -returnCodes error -result {expected floating-point number but got "DX"}

test crimp-proj-transform-4.4 {projective transforms, translate, invalid arguments} -body {
    crimp transform translate 0 DY
} -returnCodes error -result {expected floating-point number but got "DY"}

test crimp-proj-transform-4.5 {projective transforms, translate} -body {
    astclf 1 [crimp transform translate 2 3]
} -result [tconst {
    1.0 0.0 2.0
    0.0 1.0 3.0
    0.0 0.0 1.0
}]

# -------------------------------------------------------------------------
## Randomized testing. Translation.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        lassign [a-translation] p r d

        test crimp-proj-transform-4.6.$n "[origin] projective transforms, translate, fuzz" -setup {
            set t [crimp transform translate {*}$d]
        } -body {
            lindex [crimp warp point $t $p] 0
        } -cleanup {
            unset t
        } -result $r -match 4digits
        # NOTE: We have differences in the 5th digit for about 1 in 10 random cases
        # (about 48 of 500 failures in the higher precision)
        # (float vs double issue ?)

        incr n
    }
}}

# -------------------------------------------------------------------------

test crimp-proj-transform-5.0 {projective transforms, scale, wrong\#args, not enough} -body {
    crimp transform scale
} -returnCodes error -result {wrong # args: should be "crimp transform scale sx sy"}

test crimp-proj-transform-5.1 {projective transforms, scale, wrong\#args, not enough} -body {
    crimp transform scale SX
} -returnCodes error -result {wrong # args: should be "crimp transform scale sx sy"}

test crimp-proj-transform-5.2 {projective transforms, scale, wrong\#args, too many} -body {
    crimp transform scale SX SY toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform scale sx sy"}

test crimp-proj-transform-5.3 {projective transforms, scale, invalid arguments} -body {
    crimp transform scale SX SY
} -returnCodes error -result {expected floating-point number but got "SX"}

test crimp-proj-transform-5.4 {projective transforms, scale, invalid arguments} -body {
    crimp transform scale 0 SY
} -returnCodes error -result {expected floating-point number but got "SY"}

test crimp-proj-transform-5.5 {projective transforms, scale} -body {
    astclf 1 [crimp transform scale 0 0]
    # possible todo: scale to nothing. non-invertible ?! reject zero ?
} -result [tconst {
    0.0  0.0  0.0
    0.0  0.0  0.0
    0.0  0.0  1.0
}]

test crimp-proj-transform-5.6 {projective transforms, scale} -body {
    astclf 1 [crimp transform scale 1 1]
} -result [tconst {
    1.0  0.0  0.0
    0.0  1.0  0.0
    0.0  0.0  1.0
}]

test crimp-proj-transform-5.7 {projective transforms, scale} -body {
    astclf 1 [crimp transform scale 5 -0.5]
} -result [tconst {
    5.0  0.0  0.0
    0.0 -0.5  0.0
    0.0  0.0  1.0
}]

test crimp-proj-transform-5.8 {projective transforms, scale} -body {
    astclf 1 [crimp transform scale 0.5 -5]
} -result [tconst {
    0.5  0.0  0.0
    0.0 -5.0  0.0
    0.0  0.0  1.0
}]

# -------------------------------------------------------------------------
## Randomized testing. Scaling.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        lassign [a-scaling] p r f

        test crimp-proj-transform-5.9.$n "[origin] projective transforms, scaling, fuzz" -setup {
            set t [crimp transform scale {*}$f]
        } -body {
            lindex [crimp warp point $t $p] 0
        } -cleanup {
            unset t
        } -result $r -match 2digits
        # Precision only to within 2 digits for float!

        incr n
    }
}}

# -------------------------------------------------------------------------

test crimp-proj-transform-6.0 {projective transforms, shear, wrong\#args, not enough} -body {
    crimp transform shear
} -returnCodes error -result {wrong # args: should be "crimp transform shear sx sy"}

test crimp-proj-transform-6.1 {projective transforms, shear, wrong\#args, not enough} -body {
    crimp transform shear SX
} -returnCodes error -result {wrong # args: should be "crimp transform shear sx sy"}

test crimp-proj-transform-6.2 {projective transforms, shear, wrong\#args, too many} -body {
    crimp transform shear SX SY toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform shear sx sy"}

test crimp-proj-transform-6.3 {projective transforms, shear, invalid arguments} -body {
    crimp transform shear SX SY
} -returnCodes error -result {expected floating-point number but got "SX"}

test crimp-proj-transform-6.4 {projective transforms, shear, invalid arguments} -body {
    crimp transform shear 0 SY
} -returnCodes error -result {expected floating-point number but got "SY"}

test crimp-proj-transform-6.5 {projective transforms, shear} -body {
    astclf 1 [crimp transform shear 0 0]
} -result [tconst {
    1.0  0.0  0.0
    0.0  1.0  0.0
    0.0  0.0  1.0
}]

test crimp-proj-transform-6.6 {projective transforms, shear} -body {
    astclf 1 [crimp transform shear 3 4]
} -result [tconst {
    1.0  0.0  0.0
    0.0  1.0  0.0
    3.0  4.0  1.0
}]

test crimp-proj-transform-6.6 {projective transforms, shear} -body {
    astclf 1 [crimp transform shear -3 -4]
} -result [tconst {
     1.0  0.0  0.0
     0.0  1.0  0.0
    -3.0 -4.0  1.0
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-7.0 {projective transforms, reflect, wrong\#args, not enough} -body {
    crimp transform reflect
} -returnCodes error -result {wrong # args: should be "crimp transform reflect subcommand ?argument ...?"}

test crimp-proj-transform-7.1 {projective transforms, invalid method} -body {
    crimp transform reflect BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be line, x, or y}

# -------------------------------------------------------------------------

test crimp-proj-transform-8.0 {projective transforms, reflect @ line, wrong\#args, not enough} -body {
    crimp transform reflect line
} -returnCodes error -result {wrong # args: should be "crimp transform reflect line a ?b?"}

test crimp-proj-transform-8.1 {projective transforms, reflect @ line, wrong\#args, too many} -body {
    crimp transform reflect line A B toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform reflect line a ?b?"}

test crimp-proj-transform-8.2 {projective transforms, reflect @ line, wrong\#args, invalid arguments} -body {
    crimp transform reflect line A
} -returnCodes error -result {expected 2d point but got "A"}

test crimp-proj-transform-8.3 {projective transforms, reflect @ line, wrong\#args, invalid arguments} -body {
    crimp transform reflect line {X 0}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-8.4 {projective transforms, reflect @ line, wrong\#args, invalid arguments} -body {
    crimp transform reflect line {0 Y}
} -returnCodes error -result {expected floating-point number but got "Y"}

test crimp-proj-transform-8.5 {projective transforms, reflect @ line, invalid arguments} -body {
    crimp transform reflect line {0 0} B
} -returnCodes error -result {expected 2d point but got "B"}

test crimp-proj-transform-8.6 {projective transforms, reflect @ line, invalid arguments} -body {
    crimp transform reflect line {0 0} {X 0}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-8.7 {projective transforms, reflect @ line, invalid arguments} -body {
    crimp transform reflect line {0 0} {0 Y}
} -returnCodes error -result {expected floating-point number but got "Y"}

test crimp-proj-transform-8.8 {projective transforms, reflect @ line, invalid arguments} -body {
    astclf 4 [crimp transform reflect line {0 0}]
    # Reflection at (0,0) is unspecified, we have no direction for the vector.
} -returnCodes error -result {Expected non-null vector, got (0, 0)}

test crimp-proj-transform-8.9 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {5 5}]
} -result [tconst {
    0.0000  1.0000  0.0000
    1.0000  0.0000  0.0000
    0.0000  0.0000  1.0000
}]

# Note: 8.10 and 8.11 specify the same line, just using vector of
# different magnitude along it. The transform must be same.

test crimp-proj-transform-8.10 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {10 10}]
} -result [tconst {
    0.0000  1.0000  0.0000
    1.0000  0.0000  0.0000
    0.0000  0.0000  1.0000
}]

test crimp-proj-transform-8.11 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {5 10}]
} -result [tconst {
    -0.6000  0.8000  0.0000
     0.8000  0.6000  0.0000
     0.0000  0.0000  1.0000
}]

test crimp-proj-transform-8.12 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {10 5}]
} -result [tconst {
    0.6000   0.8000  0.0000
    0.8000  -0.6000  0.0000
    0.0000   0.0000  1.0000
}]

test crimp-proj-transform-8.13 {projective transforms, reflect @ line, invalid arguments} -body {
    astclf 4 [crimp transform reflect line {5 5} {5 5}]
    # Reflection at (0,0) is unspecified, we have no direction for the vector.
} -returnCodes error -result {Expected non-null vector, got (0, 0)}

test crimp-proj-transform-8.14 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {0 0} {5 5}]
} -result [tconst {
    0.0000  1.0000  0.0000
    1.0000  0.0000  0.0000
    0.0000  0.0000  1.0000
}]

test crimp-proj-transform-8.15 {projective transforms, reflect @ line} -body {
    astclf 4 [crimp transform reflect line {2 0} {5 5}]
} -result [tconst {
    -0.4706 0.8824  2.9412
     0.8824 0.4706 -1.7647
     0.0000 0.0000  1.0000
}]

# -------------------------------------------------------------------------
## Randomized testing. Reflection along arbitrary line.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        lassign [a-reflection] p r a b

        test crimp-proj-transform-8.16.$n "[origin] projective transforms, reflection, fuzz" -setup {
            set t [crimp transform reflect line $a $b]
        } -body {
            lindex [crimp warp point $t $p] 0
        } -cleanup {
            unset t
        } -result $r -match 4digits
        # Precision only to within 4 digits for float!

        incr n
    }
}}

# -------------------------------------------------------------------------

test crimp-proj-transform-9.0 {projective transforms, reflect @ x-axis, wrong\#args, too many} -body {
    crimp transform reflect x TOOMUCH
} -returnCodes error -result {wrong # args: should be "crimp transform reflect x"}

test crimp-proj-transform-9.1 {projective transforms, reflect @ x-axis} -body {
    astclf 1 [crimp transform reflect x]
} -result [tconst {
    -1.0  0.0  0.0
     1.0  0.0  0.0
     0.0  0.0  1.0
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-10.0 {projective transforms, reflect @ y-axis, wrong\#args, too many} -body {
    crimp transform reflect y TOOMUCH
} -returnCodes error -result {wrong # args: should be "crimp transform reflect y"}

test crimp-proj-transform-10.1 {projective transforms, reflect @ y-axis} -body {
    astclf 1 [crimp transform reflect y]
} -result [tconst {
     1.0  0.0  0.0
    -1.0  0.0  0.0
     0.0  0.0  1.0
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-11.0 {projective transforms, rotate, wrong\#args, not enough} -body {
    crimp transform rotate
} -returnCodes error -result {wrong # args: should be "crimp transform rotate theta ?p?"}

test crimp-proj-transform-11.1 {projective transforms, rotate, wrong\#args, too many} -body {
    crimp transform rotate THETA P toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform rotate theta ?p?"}

test crimp-proj-transform-11.2 {projective transforms, rotate, invalid arguments} -body {
    crimp transform rotate THETA P
} -returnCodes error -result {expected floating-point number but got "THETA"}

test crimp-proj-transform-11.3 {projective transforms, rotate, invalid arguments} -body {
    crimp transform rotate 1 P
} -returnCodes error -result {expected 2d point but got "P"}

test crimp-proj-transform-11.4 {projective transforms, rotate, invalid arguments} -body {
    crimp transform rotate 1 {X Y}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-11.5 {projective transforms, rotate, invalid arguments} -body {
    crimp transform rotate 1 {0 Y}
} -returnCodes error -result {expected floating-point number but got "Y"}

test crimp-proj-transform-11.6 {projective transforms, rotate} -body {
    astclf 4 [crimp transform rotate 2 {-50 -50}]
} -result [tconst {
     0.9994  0.0349  1.7145
    -0.0349  0.9994 -1.7754
     0.0000  0.0000  1.0000
}]

test crimp-proj-transform-11.7 {projective transforms, rotate, origin} -body {
    astclf 4 [crimp transform rotate 1]
} -result [tconst {
     0.9998  0.0175  0.0000
    -0.0175  0.9998  0.0000
     0.0000  0.0000  1.0000
}]

# -------------------------------------------------------------------------
## Randomized testing. Rotation around arbitrary point.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        lassign [a-rotation] p r c a

        test crimp-proj-transform-11.7.$n "[origin] projective transforms, rotation, fuzz" -setup {
            set t [crimp transform rotate $a $c]
        } -body {
            lindex [crimp warp point $t $p] 0
        } -cleanup {
            unset t
        } -result $r -match -1digits
        # Precision not even to within 0 digits for float!
        # The single-precision is hitting is hard here.

        incr n
    }
}}

# -------------------------------------------------------------------------

test crimp-proj-transform-12.0 {projective transforms, quadrilateral, wrong\#args, not enough} -body {
    crimp transform quadrilateral
} -returnCodes error -result {wrong # args: should be "crimp transform quadrilateral src dst"}

test crimp-proj-transform-12.1 {projective transforms, quadrilateral, wrong\#args, not enough} -body {
    crimp transform quadrilateral SRC
} -returnCodes error -result {wrong # args: should be "crimp transform quadrilateral src dst"}

test crimp-proj-transform-12.2 {projective transforms, quadrilateral, wrong\#args, too many} -body {
    crimp transform quadrilateral SRC DST toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform quadrilateral src dst"}

test crimp-proj-transform-12.3 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral SRC DST
} -returnCodes error -result {expected 4-element quadrilateral but got "SRC"}

test crimp-proj-transform-12.4 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} DST
} -returnCodes error -result {expected 4-element quadrilateral but got "DST"}

test crimp-proj-transform-12.5 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {X {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.6 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} X {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.7 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} X 0} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.8 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} X} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.9 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {X {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.10 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} X {0 0} {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.11 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} X {0 0}}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.12 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} X}
} -returnCodes error -result {expected 2d point but got "X"}

test crimp-proj-transform-12.13 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{X 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.14 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 X} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.15 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {X 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.16 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 X} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.17 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {X 0} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.18 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 X} {0 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.19 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {X 0}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.20 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 X}} {{0 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.21 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{X 0} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.22 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 X} {0 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.23 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {X 0} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.24 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 X} {0 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.25 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {X 0} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.26 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 X} {0 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.27 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {X 0}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.28 {projective transforms, quadrilateral, invalid arguments} -body {
    crimp transform quadrilateral {{0 0} {0 0} {0 0} {0 0}} {{0 0} {0 0} {0 0} {0 X}}
} -returnCodes error -result {expected floating-point number but got "X"}

test crimp-proj-transform-12.29 {projective transforms, quadrilateral} -body {
    astclf 4 [crimp transform quadrilateral \
                  {{0 0} {15 5} {30 30} {5 15}} \
                  {{0 0} {40 0} {40 40} {0 40}}]
} -result [tconst {
     1.1250 -2.8750 37.5000
    -2.8750  1.1250 37.5000
    -0.0344 -0.0344  1.6875
}]

test crimp-proj-transform-12.30 {projective transforms, quadrilateral} -body {
    astclf 4 [crimp transform quadrilateral \
                  {{0 0} {40 0} {40 40} {0 40}} \
                  {{0 0} {15 5} {30 30} {5 15}}]
} -result [tconst {
    -2.1250 -2.3750 100.0000
    -2.3750 -2.1250 100.0000
    -0.0917 -0.0917   4.6667
}]

test crimp-proj-transform-12.31 {projective transforms, quadrilateral} -body {
    astclf 4 [crimp transform chain \
                  [crimp transform quadrilateral \
                       {{0 0} {15 5} {30 30} {5 15}} \
                       {{0 0} {40 0} {40 40} {0 40}}] \
                  [crimp transform quadrilateral \
                       {{0 0} {40 0} {40 40} {0 40}} \
                       {{0 0} {15 5} {30 30} {5 15}}]]
    # inverse mappings yield back identity. note the -0 :(
} -result [tconst {
     1.0000  0.0000  0.0000
    -0.0000  1.0000  0.0000
    -0.0000 -0.0000  1.0000
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-13.0 {projective transforms, chain, wrong\#args, not enough} -body {
    crimp transform chain
} -returnCodes error -result {wrong # args: should be "crimp transform chain t ..."}

test crimp-proj-transform-13.1 {projective transforms, chain, invalid arguments} -body {
    crimp transform chain T
} -returnCodes error -result {expected projective transform but got "T"}


test crimp-proj-transform-13.2 {projective transforms, chain, single} -body {
    astclf 4 [crimp transform chain [crimp transform projective 2 3 4 5 6 7 8 9]]
} -result [tconst {
    2.0000  3.0000  4.0000
    5.0000  6.0000  7.0000
    8.0000  9.0000  1.0000
}]

test crimp-proj-transform-13.3 {projective transforms, chain, single} -body {
    astclf 4 [crimp transform chain [crimp transform rotate 2]]
} -result [tconst {
     0.9994  0.0349  0.0000
    -0.0349  0.9994  0.0000
     0.0000  0.0000  1.0000
}]

test crimp-proj-transform-13.4 {projective transforms, chain, translations} -body {
    astclf 4 [crimp transform chain \
                  [crimp transform translate 10 10] \
                  [crimp transform translate 50 50]]
} -result [tconst {
    1.0000  0.0000 60.0000
    0.0000  1.0000 60.0000
    0.0000  0.0000  1.0000
}]

test crimp-proj-transform-13.5 {projective transforms, chain, translate+rotate} -body {
    astclf 4 [crimp transform chain \
                  [crimp transform rotate 2] \
                  [crimp transform translate 50 50]]
} -result [tconst {
     0.9994 0.0349 50.0000
    -0.0349 0.9994 50.0000
     0.0000 0.0000 1.0000

}]

test crimp-proj-transform-13.6 {projective transforms, chain, rotate+translate} -body {
    astclf 4 [crimp transform chain \
                  [crimp transform translate 50 50] \
                  [crimp transform rotate 2]]
} -result [tconst {
     0.9994 0.0349 51.7145
    -0.0349 0.9994 48.2246
     0.0000 0.0000  1.0000

}]

test crimp-proj-transform-13.7 {projective transforms, chain, translated rotation} -body {
    astclf 4 [crimp transform chain \
                  [crimp transform translate -50 -50] \
                  [crimp transform rotate 2] \
                  [crimp transform translate 50 50]]
} -result [tconst {
     0.9994  0.0349 -1.7145
    -0.0349  0.9994  1.7754
     0.0000  0.0000  1.0000
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-14.0 {projective transforms, invert, wrong\#args, not enough} -body {
    crimp transform invert
} -returnCodes error -result {wrong # args: should be "crimp transform invert a"}

test crimp-proj-transform-14.1 {projective transforms, invert, wrong\#args, too many} -body {
    crimp transform invert A toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform invert a"}

test crimp-proj-transform-14.2 {projective transforms, invert, invalid arguments} -body {
    crimp transform invert A
} -returnCodes error -result {expected projective transform but got "A"}

test crimp-proj-transform-14.3 {projective transforms, invert, identity} -body {
    astclf 4 [crimp transform invert [crimp transform identity]]
    # note the -0 in the result :(
} -result [tconst {
    1.0000 -0.0000  0.0000
   -0.0000  1.0000 -0.0000
    0.0000 -0.0000  1.0000
}]

test crimp-proj-transform-14.4 {projective transforms, invert, rotate} -body {
    astclf 4 [crimp transform invert [crimp transform rotate -2]]
    # inverse of 'rotate -2' is 'rotate 2'.
    # but note the -0 elements :(
} -result [tconst {
     0.9994  0.0349 -0.0000
    -0.0349  0.9994 -0.0000
     0.0000 -0.0000  1.0000
}]

# -------------------------------------------------------------------------

test crimp-proj-transform-15.0 {projective transforms, identity, wrong\#args, too many} -body {
    crimp transform identity toomuch
} -returnCodes error -result {wrong # args: should be "crimp transform identity"}

test crimp-proj-transform-15.2 {projective transforms, identity} -body {
    astclf 4 [crimp transform identity]
} -result [tconst {
    1.0000  0.0000  0.0000
    0.0000  1.0000  0.0000
    0.0000  0.0000  1.0000
}]

# -------------------------------------------------------------------------
testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
