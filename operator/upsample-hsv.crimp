crimp_primitive upsample_hsv {
    image_obj_hsv image
    int      factor
} object0 {
    /*
     * The input image is upsampled by inserting 'factor-1' 0-pixels after every
     * pixel of the input. Note that this method of expanding an image introduces
     * copies of the input to appear at higher frequencies.
     *
     * The output image has to be convolved with a low-pass filter after expansion
     * to avoid such artefacts. The integrated combination of upsampling and such
     * a filter is called 'interpolation'. This is but one step in the generation
     * of difference image pyramids.
     */

    crimp_image* result;
    int          xo, yo, xi, yi, dx, dy;

    if (factor < 1) {
        Tcl_SetResult(interp, "bad sampling factor, expected integer > 0", TCL_STATIC);
        return NULL;
    }

    if (factor == 1) {
        return image.o;
    }

    result = crimp_new_at (image.i->itype, crimp_x (image.i), crimp_y (image.i), crimp_w (image.i)*factor, crimp_h (image.i)*factor);

    for (yo = 0, yi = 0; yi < crimp_h (image.i); yo += factor, yi ++) {
        for (xo = 0, xi = 0; xi < crimp_w (image.i); xo += factor, xi ++) {

	    /* Copy the pixel */
	    H (result, xo, yo) = H (image.i, xi, yi);
	    S (result, xo, yo) = S (image.i, xi, yi);
	    V (result, xo, yo) = V (image.i, xi, yi);

	    /* And insert factor black (0) pixels after */
	    for (dx = 1; dx < factor; dx++) {
	        H (result, xo + dx, yo) = BLACK;
	        S (result, xo + dx, yo) = BLACK;
	        V (result, xo + dx, yo) = BLACK;
	    }
        }

        /* And insert factor black lines after the input line*/
        for (dy = 1; dy < factor; dy++) {
	    for (xo = 0; xo < crimp_w (result); xo++) {
	        H (result, xo, yo + dy) = BLACK;
	        S (result, xo, yo + dy) = BLACK;
	        V (result, xo, yo + dy) = BLACK;
	    }
        }
    }

    return crimp_new_image_obj(result);

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
