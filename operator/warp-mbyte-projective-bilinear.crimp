crimp_primitive warp_mbyte_projective_bilinear {
    image        image
    image_double forward
} image {
    /*
     * Warp image using the given specified transform. The result is made large
     * enough to contain all of the warped image, and will contain meta data about
     * the location of the actual (0,0) origin point relative to the physical top
     * left corner of the result. This last is required because translations in
     * the transform may move pixels to negative positions which we cannot express
     * with the regular memory grid.
     */

    crimp_image* backward;
    crimp_image* result;
    int x, y, xt, yt, origx, origy, c;
    double xf, yf;

    CRIMP_ASSERT_NOTIMGTYPE (image, float);
    CRIMP_ASSERT_NOTIMGTYPE (image, grey16);
    CRIMP_ASSERT_NOTIMGTYPE (image, grey32);


    if (!crimp_require_dim (forward, 3, 3)) {
        Tcl_SetResult(interp, "bad matrix dimensions, expected 3x3", TCL_STATIC);
        return NULL;
    }

    backward = crimp_la_invert_matrix_3x3 (forward);
    if (!backward) {
        Tcl_SetResult(interp, "Unable to invert singular matrix", TCL_STATIC);
        return NULL;
    }

    /*
     * Determine size of the result, and the location of the origin point inside
     * based on the four corners of the input image and the forward transformation.
     */

    result = crimp_geo_warp_init (image, forward, &origx, &origy);

    for (y = 0, yt = origy; y < crimp_h (result); y++, yt++) {
        for (x = 0, xt = origx; x < crimp_w (result); x++, xt++) {
	    int xl, yl, xu, yu;

	    xf = xt;
	    yf = yt;
	    crimp_geo_warp_point (backward, &xf, &yf);

	    /*
	     * Perform bilinear interpolation (1) using the nearest 2x2 pixels
	     * around the sampling location.
	     *
	     * (Ad 1) http://en.wikipedia.org/wiki/Bilinear_interpolation
	     */

	    crimp_interval (xf, &xl, &xu, &xf);
	    crimp_interval (yf, &yl, &yu, &yf);

#define OUT(i,x,y) (((x) < 0) || ((x) >= crimp_w (i)) || ((y) < 0) || ((y) >= crimp_h (i)))

            for (c = 0; c < crimp_c(image); ++c) {
		double a = OUT(image, xl, yl) ? BLACK : CH (image, c, xl, yl);
		double b = OUT(image, xu, yl) ? BLACK : CH (image, c, xu, yl);
		double c = OUT(image, xl, yu) ? BLACK : CH (image, c, xl, yu);
		double d = OUT(image, xu, yu) ? BLACK : CH (image, c, xu, yu);

		CH (result, c, x, y) = crimp_interpolate_bilinear (a, b, c, d,
								   xf, yf);
            }
        }
    }

    crimp_del (backward);
    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
