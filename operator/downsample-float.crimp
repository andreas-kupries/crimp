crimp_primitive downsample_float {
    image_obj_float image
    int      factor
} object0 {
    /*
     * The input image is downsampled by storing only every 'factor' pixel into
     * the result. Note that this method of shrinking an image causes image
     * frequencies above the nyquist threshold of the result to be aliased into
     * the range.
     *
     * The input image has to be convolved with a low-pass filter first, to avoid
     * such artefacts. The integrated combination of such a filter with
     * downsampling is called 'decimation'. This is but one step in the generation
     * of image pyramids.
     */

    crimp_image* result;
    int          xo, yo, xi, yi;

    if (factor < 1) {
        Tcl_SetResult(interp, "bad sampling factor, expected integer > 0", TCL_STATIC);
        return NULL;
    }

    if (factor == 1) {
        return image.o;
    }

    result = crimp_new_at (image.i->itype,
		           crimp_x (image.i), crimp_y (image.i),
		           crimp_w (image.i)/factor, crimp_h (image.i)/factor);

    for (yo = 0, yi = 0; yo < crimp_h (result); yo++, yi += factor) {
        for (xo = 0, xi = 0; xo < crimp_w (result); xo++, xi += factor) {

	    FLOATP (result, xo, yo) = FLOATP (image.i, xi, yi);
        }
    }

    return crimp_new_image_obj(result);

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
