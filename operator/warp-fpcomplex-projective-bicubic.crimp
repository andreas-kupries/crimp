crimp_primitive warp_fpcomplex_projective_bicubic {
    image_fpcomplex image
    image_float     forward
} image {
    /*
     * Warp image using the given specified transform. The result is made large
     * enough to contain all of the warped image, and will contain meta data about
     * the location of the actual (0,0) origin point relative to the physical top
     * left corner of the result. This last is required because translations in
     * the transform may move pixels to negative positions which we cannot express
     * with the regular memory grid.
     */

    crimp_image* backward;
    crimp_image* result;
    int x, y, xt, yt, origx, origy;
    double xf, yf;

    backward = crimp_la_invert_matrix_3x3 (forward);
    if (!backward) {
        Tcl_SetResult(interp, "Unable to invert singular matrix", TCL_STATIC);
        return NULL;
    }

    /*
     * Determine size of the result, and the location of the origin point inside
     * based on the four corners of the input image and the forward transformation.
     */

    result = crimp_geo_warp_init (image, forward, &origx, &origy);

    for (y = 0, yt = origy; y < crimp_h (result); y++, yt++) {
        for (x = 0, xt = origx; x < crimp_w (result); x++, xt++) {
	    int ixw, iyw;

	    xf = xt;
	    yf = yt;
	    crimp_geo_warp_point (backward, &xf, &yf);

	    /*
	     * Perform bicubic interpolation (1,2) using the nearest 4x4 pixels
	     * around the sampling location.
	     *
	     * (Ad 1) http://en.wikipedia.org/wiki/Bicubic_interpolation
	     * (Ad 2) http://www.paulinternet.nl/?page=bicubic
	     */

            ixw = xf;  xf -= ixw;
            iyw = yf;  yf -= iyw;

	    ixw --; xf += 1.; xf /= 3.;
	    iyw --; yf += 1.; yf /= 3.;

    #undef  SAMPLE_RE
    #define SAMPLE_RE(dx,dy) ((((ixw+(dx)) < 0               ) || \
			       ((ixw+(dx)) >= crimp_w (image)) || \
			       ((iyw+(dy)) < 0               ) || \
			       ((iyw+(dy)) >= crimp_h (image)))   \
			      ? BLACK			      \
			      : (RE (image, (ixw+(dx)), (iyw+(dy)))))

    #undef  SAMPLE_IM
    #define SAMPLE_IM(dx,dy) ((((ixw+(dx)) <  0              ) ||	\
			       ((ixw+(dx)) >= crimp_w (image)) ||	\
			       ((iyw+(dy)) <  0              ) ||	\
			       ((iyw+(dy)) >= crimp_h (image)))	\
			      ? BLACK				\
			      : (IM (image, (ixw+(dx)), (iyw+(dy)))))

	    {
	        double rep00 = SAMPLE_RE(0,0);
	        double rep01 = SAMPLE_RE(0,1);
	        double rep02 = SAMPLE_RE(0,2);
	        double rep03 = SAMPLE_RE(0,3);
	        double rep10 = SAMPLE_RE(1,0);
	        double rep11 = SAMPLE_RE(1,1);
	        double rep12 = SAMPLE_RE(1,2);
	        double rep13 = SAMPLE_RE(1,3);
	        double rep20 = SAMPLE_RE(2,0);
	        double rep21 = SAMPLE_RE(2,1);
	        double rep22 = SAMPLE_RE(2,2);
	        double rep23 = SAMPLE_RE(2,3);
	        double rep30 = SAMPLE_RE(3,0);
	        double rep31 = SAMPLE_RE(3,1);
	        double rep32 = SAMPLE_RE(3,2);
	        double rep33 = SAMPLE_RE(3,3);

	        double a00 =      rep11;
	        double a01 = -.50*rep10 +  .50*rep12;
	        double a02 =      rep10 - 2.50*rep11 + 2.00*rep12 -  .50*rep13;
	        double a03 = -.50*rep10 + 1.50*rep11 - 1.50*rep12 +  .50*rep13;
	        double a10 = -.50*rep01 +  .50*rep21;
	        double a11 =  .25*rep00 -  .25*rep02 -  .25*rep20 +  .25*rep22;
	        double a12 = -.50*rep00 + 1.25*rep01 -      rep02 +  .25*rep03 +  .50*rep20 - 1.25*rep21 +      rep22 -  .25*rep23;
	        double a13 =  .25*rep00 -  .75*rep01 +  .75*rep02 -  .25*rep03 -  .25*rep20 +  .75*rep21 -  .75*rep22 +  .25*rep23;
	        double a20 =      rep01 - 2.50*rep11 + 2.00*rep21 -  .50*rep31;
	        double a21 = -.50*rep00 +  .50*rep02 + 1.25*rep10 - 1.25*rep12 -      rep20 +      rep22 +  .25*rep30 -  .25*rep32;
	        double a22 =      rep00 - 2.50*rep01 + 2.00*rep02 -  .50*rep03 - 2.50*rep10 + 6.25*rep11 - 5.00*rep12 + 1.25*rep13 +
		    2.00*rep20 - 5.00*rep21 + 4.00*rep22 -     rep23 - .50*rep30 + 1.25*rep31 -     rep32 + .25*rep33;
	        double a23 = -.50*rep00 + 1.50*rep01 - 1.50*rep02 +  .50*rep03 + 1.25*rep10 - 3.75*rep11 + 3.75*rep12 - 1.25*rep13 -
		    rep20 + 3.00*rep21 - 3.00*rep22 +     rep23 + .25*rep30 -  .75*rep31 + .75*rep32 - .25*rep33;
	        double a30 = -.50*rep01 + 1.50*rep11 - 1.50*rep21 +  .50*rep31;
	        double a31 =  .25*rep00 -  .25*rep02 -  .75*rep10 +  .75*rep12 +  .75*rep20 -  .75*rep22 -  .25*rep30 +  .25*rep32;
	        double a32 = -.50*rep00 + 1.25*rep01 -      rep02 +  .25*rep03 + 1.50*rep10 - 3.75*rep11 + 3.00*rep12 -  .75*rep13 -
		    1.50*rep20 + 3.75*rep21 - 3.00*rep22 + .75*rep23 + .50*rep30 - 1.25*rep31 +     rep32 - .25*rep33;
	        double a33 =  .25*rep00 -  .75*rep01 +  .75*rep02 -  .25*rep03 -  .75*rep10 + 2.25*rep11 - 2.25*rep12 +  .75*rep13 +
		    .75*rep20 - 2.25*rep21 + 2.25*rep22 - .75*rep23 - .25*rep30 +  .75*rep31 - .75*rep32 + .25*rep33;

	        double imp00 = SAMPLE_IM(0,0);
	        double imp01 = SAMPLE_IM(0,1);
	        double imp02 = SAMPLE_IM(0,2);
	        double imp03 = SAMPLE_IM(0,3);
	        double imp10 = SAMPLE_IM(1,0);
	        double imp11 = SAMPLE_IM(1,1);
	        double imp12 = SAMPLE_IM(1,2);
	        double imp13 = SAMPLE_IM(1,3);
	        double imp20 = SAMPLE_IM(2,0);
	        double imp21 = SAMPLE_IM(2,1);
	        double imp22 = SAMPLE_IM(2,2);
	        double imp23 = SAMPLE_IM(2,3);
	        double imp30 = SAMPLE_IM(3,0);
	        double imp31 = SAMPLE_IM(3,1);
	        double imp32 = SAMPLE_IM(3,2);
	        double imp33 = SAMPLE_IM(3,3);

	        double b00 =      imp11;
	        double b01 = -.50*imp10 +  .50*imp12;
	        double b02 =      imp10 - 2.50*imp11 + 2.00*imp12 -  .50*imp13;
	        double b03 = -.50*imp10 + 1.50*imp11 - 1.50*imp12 +  .50*imp13;
	        double b10 = -.50*imp01 +  .50*imp21;
	        double b11 =  .25*imp00 -  .25*imp02 -  .25*imp20 +  .25*imp22;
	        double b12 = -.50*imp00 + 1.25*imp01 -      imp02 +  .25*imp03 +  .50*imp20 - 1.25*imp21 +      imp22 -  .25*imp23;
	        double b13 =  .25*imp00 -  .75*imp01 +  .75*imp02 -  .25*imp03 -  .25*imp20 +  .75*imp21 -  .75*imp22 +  .25*imp23;
	        double b20 =      imp01 - 2.50*imp11 + 2.00*imp21 -  .50*imp31;
	        double b21 = -.50*imp00 +  .50*imp02 + 1.25*imp10 - 1.25*imp12 -      imp20 +      imp22 +  .25*imp30 -  .25*imp32;
	        double b22 =      imp00 - 2.50*imp01 + 2.00*imp02 -  .50*imp03 - 2.50*imp10 + 6.25*imp11 - 5.00*imp12 + 1.25*imp13 +
		    2.00*imp20 - 5.00*imp21 + 4.00*imp22 -     imp23 - .50*imp30 + 1.25*imp31 -     imp32 + .25*imp33;
	        double b23 = -.50*imp00 + 1.50*imp01 - 1.50*imp02 +  .50*imp03 + 1.25*imp10 - 3.75*imp11 + 3.75*imp12 - 1.25*imp13 -
		    imp20 + 3.00*imp21 - 3.00*imp22 +     imp23 + .25*imp30 -  .75*imp31 + .75*imp32 - .25*imp33;
	        double b30 = -.50*imp01 + 1.50*imp11 - 1.50*imp21 +  .50*imp31;
	        double b31 =  .25*imp00 -  .25*imp02 -  .75*imp10 +  .75*imp12 +  .75*imp20 -  .75*imp22 -  .25*imp30 +  .25*imp32;
	        double b32 = -.50*imp00 + 1.25*imp01 -      imp02 +  .25*imp03 + 1.50*imp10 - 3.75*imp11 + 3.00*imp12 -  .75*imp13 -
		    1.50*imp20 + 3.75*imp21 - 3.00*imp22 + .75*imp23 + .50*imp30 - 1.25*imp31 +     imp32 - .25*imp33;
	        double b33 =  .25*imp00 -  .75*imp01 +  .75*imp02 -  .25*imp03 -  .75*imp10 + 2.25*imp11 - 2.25*imp12 +  .75*imp13 +
		    .75*imp20 - 2.25*imp21 + 2.25*imp22 - .75*imp23 - .25*imp30 +  .75*imp31 - .75*imp32 + .25*imp33;

	        double x2 = xf * xf;
	        double x3 = x2 * xf;
	        double y2 = yf * yf;
	        double y3 = y2 * yf;

	        RE (result, x, y) = 
		    (a00 + a01 * yf + a02 * y2 + a03 * y3)      +
		    (a10 + a11 * yf + a12 * y2 + a13 * y3) * xf +
		    (a20 + a21 * yf + a22 * y2 + a23 * y3) * x2 +
		    (a30 + a31 * yf + a32 * y2 + a33 * y3) * x3;	    

	        IM (result, x, y) = 
		    (b00 + b01 * yf + b02 * y2 + b03 * y3)      +
		    (b10 + b11 * yf + b12 * y2 + b13 * y3) * xf +
		    (b20 + b21 * yf + b22 * y2 + b23 * y3) * x2 +
		    (b30 + b31 * yf + b32 * y2 + b33 * y3) * x3;	    
            }
        }
    }

    crimp_del (backward);
    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
