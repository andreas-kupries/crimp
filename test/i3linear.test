# -*- tcl -*-
# -------------------------------------------------------------------------

source [file join \
            [file dirname [file join [pwd] [info script]]] \
            testutilities.tcl]

testsNeedTcl     8.5
testsNeedTcltest 2

support {}
testing {
    useC [mainPath _test/lib]/crimp_core* crimp::core no
}

# -------------------------------------------------------------------------
## Core math: trilinear interpolation

test crimp-core-math-3linear-1.0 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.1 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.2 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.3 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.4 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.5 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.6 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E F
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.7 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E F G
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.8 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E F G H
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.9 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E F G H XF
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.10 {interpolate trilinear, wrong args, not enough} -body {
    crimp interpolate trilinear A B C D E F G H XF YF
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

test crimp-core-math-3linear-1.11 {interpolate trilinear, wrong args, too many} -body {
    crimp interpolate trilinear A B C D E F G H XF YF ZF XXX
} -returnCodes error -result {wrong # args: should be "crimp interpolate trilinear a b c d e f g h xf yf zf"}

# -------------------------------------------------------------------------
## Fixed functionality

test crimp-core-math-3linear-2.0 {interpolate trilinear, fixed setup} -body {
    crimp interpolate trilinear \
        0 0.5 0.5 1 \
        1 2   2   3 \
        0.5 0.5 0.5
} -result 1.25 -match epsilon

# -------------------------------------------------------------------------
## Randomized functionality.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        # Compute an interpolation.
        set a [rand -10 10]
        set b [rand -10 10]
        set c [rand -10 10]
        set d [rand -10 10]

        set e [rand -10 10]
        set f [rand -10 10]
        set g [rand -10 10]
        set h [rand -10 10]

        set x [rand 0 1]
        set y [rand 0 1]
        set z [rand 0 1]

        set y1 [crimp interpolate bilinear $a $b $c $d $x $y]
        set y2 [crimp interpolate bilinear $e $f $g $h $x $y]

        set r [expr {$y1+($y2-$y1)*$z}]

        # And check
        test crimp-core-math-3linear-3.$n "interpolate trilinear, fuzz" -body {
            crimp interpolate trilinear $a $b $c $d $e $f $g $h $x $y $z
        } -result $r -match 14digits

        unset a b c d e f g h x y z y1 y2 r
        incr n
    }
}}

# -------------------------------------------------------------------------
testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
