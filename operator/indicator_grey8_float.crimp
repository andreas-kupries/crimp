crimp_primitive indicator_grey8_float {
    image_grey8 image
    int testValue
    float equalValue
    float notEqualValue
} image {
    /*
     * Computes an 'indicator function' for an image.
     *
     * The transfer function is 
     *	outputPixel = (inputPixel == testValue) ? equalValue : notEqualValue
     *
     * Copyright (c) 2011 by Kevin B. Kenny.
     *
     * See the file "license.terms" for information on usage and redistribution of
     * this file, and for a DISCLAIMER OF ALL WARRANTIES.
     */

    crimp_image* result;		/* Resulting label image */
    unsigned char trial;		/* Background pixel value */
    int width;
    int height;
    int x, y;

    /* Process inputs */

    width = crimp_w (image);
    height = crimp_h (image);
    trial = (unsigned char) testValue;

    /* Make the output image */

    result = crimp_new_float_at (crimp_x (image), crimp_y (image),
			         width, height);
    for (y = 0; y < height; ++y) {
        for (x = 0; x < width; ++x) {
	    FLOATP(result, x, y) =
	        ((GREY8(image, x, y)) == trial) ? equalValue : notEqualValue;
        }
    }

    /* Return indicator function to caller */

    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
