# -*- tcl -*-
# -------------------------------------------------------------------------

source [file join \
            [file dirname [file join [pwd] [info script]]] \
            testutilities.tcl]

testsNeedTcl     8.5
testsNeedTcltest 2

support { useLocalFile synth.tcl }
support { useC [mainPath _test/lib]/crimp_core* crimp::core no }
testing { useC [mainPath _test/lib]/crimp*      crimp       no }

# -------------------------------------------------------------------------
## Rotating images in 90 degree steps (+/- 90, 180).
#
## TODO (implementation): fpcomplex.
# -------------------------------------------------------------------------

test crimp-rotate-1.0 {image rotate, wrong\#args, not enough} -body {
    crimp rotate
} -returnCodes error -result {wrong # args: should be "crimp rotate subcommand ?argument ...?"}

test crimp-rotate-1.1 {image rotate, invalid method} -body {
    crimp rotate BOGUS
} -returnCodes error -result {unknown or ambiguous subcommand "BOGUS": must be ccw, cw, or half}

# -------------------------------------------------------------------------

test crimp-rotate-2.0 {image rotate ccw, wrong\#args, not enough} -body {
    crimp rotate ccw
} -returnCodes error -result {wrong # args: should be "crimp rotate ccw image"}

test crimp-rotate-2.1 {image rotate ccw, wrong\#args, too many} -body {
    crimp rotate ccw I toomuch
} -returnCodes error -result {wrong # args: should be "crimp rotate ccw image"}

set n 2
foreach itype [types] {
    test crimp-rotate-2.$n "[origin] image rotate ccw, $itype" -body {
	crimp write 2string tcl [crimp rotate ccw [$itype]]
    } -result [flipv [fliptp [t_$itype]]] \
	-constraints [expr {$itype ne "fpcomplex"
			    ? ""
			    : "NotImplemented"}]
    incr n
}

# -------------------------------------------------------------------------

test crimp-rotate-3.0 {image rotate cw, wrong\#args, not enough} -body {
    crimp rotate cw
} -returnCodes error -result {wrong # args: should be "crimp rotate cw image"}

test crimp-rotate-3.1 {image rotate cw, wrong\#args, too many} -body {
    crimp rotate cw I toomuch
} -returnCodes error -result {wrong # args: should be "crimp rotate cw image"}

set n 2
foreach itype [types] {
    test crimp-rotate-3.$n "[origin] image rotate cw, $itype" -body {
	crimp write 2string tcl [crimp rotate cw [$itype]]
    } -result [fliph [fliptp [t_$itype]]] \
	-constraints [expr {$itype ne "fpcomplex"
			    ? ""
			    : "NotImplemented"}]
    incr n
}

# -------------------------------------------------------------------------

test crimp-rotate-4.0 {image rotate half, wrong\#args, not enough} -body {
    crimp rotate half
} -returnCodes error -result {wrong # args: should be "crimp rotate half image"}

test crimp-rotate-4.1 {image rotate half, wrong\#args, too many} -body {
    crimp rotate half I toomuch
} -returnCodes error -result {wrong # args: should be "crimp rotate half image"}

set n 2
foreach itype [types] {
    test crimp-rotate-4.$n "[origin] image rotate half, $itype" -body {
	crimp write 2string tcl [crimp rotate half [$itype]]
    } -result [fliph [flipv [t_$itype]]] \
	-constraints [expr {$itype ne "fpcomplex"
			    ? ""
			    : "NotImplemented"}]
    incr n
}

# -------------------------------------------------------------------------
## Handling of input location and geometry: Pass through.

foreach {k op} {
    2 ccw
    3 cw
    4 half
} {
    set n 10
    foreach itype [types] {
	test crimp-rotate-$k.$n "[origin] image rotate $op, $itype, input handling" -body {
	    crimp at [crimp rotate $op [crimp place [$itype] 4 5]]
	} -result {4 5} \
	    -constraints [expr {($itype ne "fpcomplex")
				? ""
				:"NotImplemented"}]
	incr n
    }
}

# -------------------------------------------------------------------------
testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
