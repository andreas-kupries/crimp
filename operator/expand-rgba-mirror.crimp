crimp_primitive expand_rgba_mirror {
    image_rgba image
    int ww
    int hn
    int we
    int hs
} image {
    /*
     * Border expansion by mirroring along the edges, also called reflective
     * expansion.
     */

    /*
     * This is the simple definition. Might be better to generate macros
     * specialized to each quadrant. Except, even they have to perform modulo
     * arithmetic, as the border may be larger than image's width or height,
     * causing multiple wrapping.
     */

    #define FILL(xo,yo) {						   \
	    int xi = xo - ww;					   \
	    int yi = yo - hn;					   \
	    while (1) {						   \
	        if      (xi < 0)         { xi = 0              - xi; } \
	        else if (xi >= crimp_w (image)) { xi = 2*(crimp_w (image)-1) - xi; } \
	        else break;						   \
	    }							   \
								       \
	    while (1) {						   \
	        if      (yi < 0)         { yi = 0              - yi; } \
	        else if (yi >= crimp_h (image)) { yi = 2*(crimp_h (image)-1) - yi; } \
	        else break;						   \
	    }							   \
								       \
	    R (result, xo, yo) = R (image, xi, yi);			   \
	    G (result, xo, yo) = G (image, xi, yi);			   \
	    B (result, xo, yo) = B (image, xi, yi);			   \
	    A (result, xo, yo) = A (image, xi, yi);			   \
        }

    #define COPY(xo,yo,xi,yi) {			\
	    R (result, xo, yo) = R (image, xi, yi); \
	    G (result, xo, yo) = G (image, xi, yi); \
	    B (result, xo, yo) = B (image, xi, yi); \
	    A (result, xo, yo) = A (image, xi, yi); \
        }

    #include <expand_op.c>
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
