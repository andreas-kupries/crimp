noise_gaussian_grey16
Tcl_Obj* imageObj
double mean
double variance

const double maxval = MAXVAL_GREY16;

/*
 * Adding gaussian-style noise (*) to the image, converting a source of
 * uniformly distributed numbers to gaussian distributed numbers.
 */

crimp_image* image;
crimp_image* result;
int          x, y;

crimp_input (imageObj, image, grey16);

result = crimp_new_like (image);

for (y = 0; y < crimp_h (result); y++) {
    for (x = 0; x < crimp_w (result); x++) {
	double ran = sqrt ((-2.0f ) * log(RAND_FLOAT())) * sin (2 * M_PI * RAND_FLOAT());
	double pix = maxval * ((GREY16 (image, x, y) / maxval) + (sqrt(variance) * ran) + mean);

	GREY16 (result, x, y) = CLAMP (0, (int) pix, MAXVAL_GREY16);
    }
}


Tcl_SetObjResult(interp, crimp_new_image_obj (result));
return TCL_OK;


/* vim: set sts=4 sw=4 tw=80 et ft=c: */
/*
 * Local Variables:
 * mode: c
 * c-basic-offset: 4
 * fill-column: 78
 * End:
 */
