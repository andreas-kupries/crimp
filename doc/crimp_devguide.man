[comment {-*- tcl -*- doctools manpage}]
[manpage_begin crimp_devguide n 1]
[include include/module.inc]
[titledesc {CRIMP - The Developer's Guide}]
[description]

Welcome to CRIMP, the C Raster Image Manipulation Package, a set of
extensions of [term Tcl] for the handling and processing of
images.

[para]

This document is a guide for developers working on the "C Raster Image
Manipulation Package" (short CRIMP), i.e. maintainers fixing bugs,
extending the package's functionality, etc.

[para]

Please read

[list_begin enum]
[enum] [term {CRIMP - How To Get The Sources}] and
[enum] [term {CRIMP - The Installer's Guide}]
[list_end]

first, if that was not done already.

Here we assume that the sources are already available in a directory
of your choice, and that you not only know how to build and install
them, but also have all the necessary requisites to actually do
so. The guide to the sources in particular also explains which source
code management system is used, where to find it, how to set it up,
etc.


[section {Playing with CRIMP}]

For a demonstration of CRIMP's current abilities see the
[file demos.tcl] application. Within the crimp source directory run it
as

[example {
    tclsh8.5 demos.tcl
}]

or

[example {
    tclsh8.5 demos.tcl /path/to/crimp/packages ...
}]

If CRIMP's packages have already been installed, or can be found in
one of the paths provided as arguments, then this will simply start
the application.

Otherwise the demo application will attempt to automatically build
them using the [package critcl] package in mode "compile & run". This
assumes that the [cmd critcl] v3 packages were installed, and not just
the [cmd critcl] application.

If only the [cmd critcl] application was installed then this
on-the-fly building of CRIMP is not possible and the packages must be
installed first before using [file demos.tcl].

[para]

After starting the application opens a GUI which shows two lists on
the left side, of the images available to the demos, and of the demos
themselves. The latter list changed contents dynamically based on the
number of images selected (0, 1, or 2).

[para]

After selecting image and demo the result of the demo is shown on the
right side, usually as a plain image, the result of whatever operation
was chosen. Some demos generate a slideshow of multiple images, or
provide additional GUI elements, i.e. buttons, sliders, etc. for
interactive manipulation of the demo.

[para]

A few demos do not generate images, but print information to the log
window, which is shown on the left, above the lists for images and
demos.

[para]

The size of the areas allocated to log window, selection lists, and
demo results can be modified using the mouse, by dragging the panel
separators.

[section {Developing for CRIMP}]

[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Architecture & Concepts}]

Most of the overall architecture and concepts like images (image values), image-types,
and the general design, are all introduced in the user documentation, namely

[list_begin enumerated]
[enum] [term {CRIMP - Introduction to CRIMP}], and
[enum] [term {CRIMP - Foundation}]
[list_end]

Here we concentrate on some details of the internals. First, the main data structures
and their relationships:

[para][image structures][para]

Yellow structures are allocated on the heap, whereas blue structures are statically
allocated as (static, i.e. non-public) global variables.

[para] The named [term image_type]s declare the structure of image pixels, i.e. how
many channels they have, their names, and the number of bytes per channel. This can
be queried at Tcl level.

[para] Regarding the [term image]s themselves, each is represented by a single
heap-allocated structure with references to the type, i.e. pixel structure, and
user-specified meta data (held by a standard [term Tcl_Obj] of type [term dictionary]),
dimensions, and the pixel data itself. The latter is part of the structure, and not
allocated separately.

[para] From the Tcl level, i.e. string representation, things looks a bit differently

[para][image objtype][para]

Each of the elements of an image are elements in a Tcl list, with the type string
a pointer into the database of pixel structures and the pixel data represented by
a bytearray.


[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Directory structure}]

[list_begin definitions][comment {___1___}]

[comment =====================================================================]
[def Helpers]

[list_begin definitions]
[def [file tools/]]

	This directory contains helper scripts.

[def [file tools/makedoc.sh]]
[def [file tools/makefigures.sh]]
[def [file tools/makedocfigures.sh]]
      
These helper scripts, when run, (re)generate the embedded documentation
from the documentation sources, or the figures, or both.

This requires the applications [syscmd mimetex], [syscmd convert]
(ImageMagick), [syscmd dtplite], and [syscmd dia]. The latter is, for
example, installed by ActiveTcl.

[def [file tools/validatedoc.sh]]

This helper script validates that the documentation markup conforms to
the syntax of [term doctools]. Nothing is generated.

[comment {
        TODO:   convert - ImageMagick
        TODO:   mimetex - Where, install, build, ...
        TODO:   dia, dtplite ...
}]
[list_end]

[comment =====================================================================]
[def Documentation]

[list_begin definitions]
[def [file doc/]]

This directory contains the documentation sources. The texts are written
in [term doctools] format, whereas the figures are a mixture of TeX (math
formulas), and tklib's [package dia](gram) package and application.

[def [file embedded/]]

This directory contains the documentation converted to regular manpages
(nroff) and HTML.

It is called embedded because these files, while derived, are part of the
fossil repository, i.e. embedded into it. This enables fossil to access
and display these files when serving the repositories' web interface.
The "Command Reference" link at

[uri http://chiselapp.com/user/andreas_kupries/repository/crimp/home]

is, for example, accessing the generated HTML.

[def [file specs/]]

This directory contains specifications of the image file formats for which
CRIMP provides readers and/or writers.

Currently this is only PGM and PPM, i.e "Portable Grey Map" and
"Portable Pix Map" respectively, and Windows's BMP format.

[list_end]

[comment =====================================================================]
[def {Demonstration Application and Framework}]

[list_begin definitions]
[def [file demos.tcl]]

This is the demo application & framework.

[def [file demos/]]

This directory is searched by [file demos.tcl] for the demonstrations to make
available to its user. See [sectref {Writing a new demo}] for information on the
structure of a demonstration.

[def [file images/]]

This directory is searched by [file demos.tcl] for the images to make
available to its user and the demos. See [sectref {Adding a new demo image}]
for more information.

[list_end]

[comment =====================================================================]
[def {Package Code, General structure}]

[list_begin definitions]
[def [file crimp*.tcl]]

These are the master files of the packages. Based on [cmd critcl] (v3) they
contain all the necessary declarations to build their package.

[para]

Each file reads the primitives to implement from the files in the
sub-directories [file core/] (crimp_core), [file operator/] (crimp), and
[file format/] (crimp_*, except for core).


[def [file support.tcl]]

This is a shared helper file used by the package master files. It contains
the general code to load and convert [file .crimp] files.

[def [file policy*.tcl]]

These are the companions to the [file crimp*.tcl] files which implement the
higher-level interfaces on top of the C-based primitive operations, and
determine policies.

[para]

The documentation (see [file doc/]) mainly describes this higher-level API,
plus the few primitives which are passed through unchanged, i.e. without
getting wrapped into Tcl procedures.

[def [file plot.tcl]]

This is a companion Tcl file to [file crimp_tk.tcl] and [file policy_tk.tcl]
which implements a simple plot widget. It essentially wraps Tklib's
[package Plotchart] package into a simpler interface.

[para]

The main user of this functionality is currently the demonstration framework,
[file demos.tcl].

[def [file operator/]]
        
This directory contain the sources of the C-level primitives implemented by
CRIMP.

[para]

The master file [file crimp.tcl] reads all the [file .crimp] files found in
this directory, converting them into proper [cmd critcl::cproc]s.

[def [file core/]]
        
This directory contain the sources of the core C-level primitives
implemented by CRIMP.

[para]

The master file [file crimp_core.tcl] reads all the [file .crimp] files found
in this directory, converting them into proper [cmd critcl::cproc]s.

[def [file format/]]
        
This directory contain the sources of the C-level primitives for file
and other I/O implemented by the various I/O packages.

[para]

The master files [file crimp_*.tcl] read all the associated [file .crimp]
files found in this directory, converting them into proper
[cmd critcl::cproc]s. I.e.

[list_begin definitions]
[def [file crimp_bmp.tcl]]	[file format/*bmp*.crimp]
[def [file crimp_pfm.tcl]]	[file format/*pfm*.crimp]
[def [file crimp_pgm.tcl]]	[file format/*pgm*.crimp]
[def [file crimp_ppm.tcl]]	[file format/*ppm*.crimp]
[def [file crimp_tk.tcl]]	[file format/*tk*.crimp]
[list_end]

[def [file cop/]]
(speak: C op ;)

For a few of the primitives in operator/ (see above) the implementations were
very similar. This directory contains "templates" for these implementations,
with the actual primitives [cmd #include]'ing them. The templates are configured
through a number a C [cmd #define]'s for the parts where the primitives differ.

[para]

The files all belong to package [package crimp].

[para]

This is a first attempt at templating some of the C code. It works, but
isn't really very nicely done.

[para]

While I (AK) have the general ida of using Tcl and Tcl-based macro-processors
(like "expand", see Wiki) bouncing around in my head for a better templating
and C code generation mechanism there is nothing concrete yet.

[def [file c/]]

This directory contain the C sources for common/shared functionality,
mainly the Tcl_ObjType's for "image type"-values and "image"-values,
and complex functions I really did not wish to duplicate in the C
primitives (AHE support, Rank-Order Filter support, geometry functions,
FFT).

[para]

As such some of it belongs to package [package crimp::core], with the
large remainder belonging to package [package crimp].

[def [file reader/]]

This directories contains the read procedures for image formats done in
pure Tcl, and outside of the main I/O packages.

[para]

Currently this is [uri http://wiki.tcl.tk/496 {Richard Suchenwirth}]'s
[uri http://wiki.tcl.tk/1881 strimj]'es.

[para]

The files in these directories are declared as Tcl companion files of
[file crimp.tcl], causing them to be sourced automatically by the critcl
framework when CRIMP is loaded.

[list_end]

[comment =====================================================================]
[def {Package Code, Per Package}]

[list_begin definitions]

[def [package crimp::core]]

[list_begin definitions]
[def [file crimp_core.tcl]]
[def [file policy_core.tcl]]
[def [file core/*.crimp]]
[def [file c/coreInt.h]]
[def [file c/image.[lb]ch[rb]]]
[def [file c/volume.[lb]ch[rb]]]
[def [file c/image_type.[lb]ch[rb]]]
[def [file c/buffer.[lb]ch[rb]]]

[list_end]

[def [package crimp]]

[list_begin definitions]
[def [file crimp.tcl]]
[def [file policy.tcl]]
[def [file operator/*.crimp]]
[def [file reader/*]]
[def [file cop/*]]
[def [file c/*]]
Regarding [file c/*] only those not claimed by [package crimp::core], see above.
[list_end]

[def [package crimp::bmp]]

[list_begin definitions]
[def [file crimp_bmp.tcl]]
[def [file policy_bmp.tcl]]
[def [file format/*bmp*.crimp]]
[def [file format/bmp.[lb]ch[rb]]]
[list_end]

[def [package crimp::pfm]]

[list_begin definitions]
[def [file crimp_pfm.tcl]]
[def [file policy_pfm.tcl]]
[def [file format/*pfm*.crimp]]
[list_end]

[def [package crimp::pgm]]

[list_begin definitions]
[def [file crimp_pgm.tcl]]
[def [file policy_pgm.tcl]]
[def [file format/*pgm*.crimp]]
[list_end]

[def [package crimp::ppm]]

[list_begin definitions]
[def [file crimp_ppm.tcl]]
[def [file policy_ppm.tcl]]
[def [file format/*ppm*.crimp]]
[list_end]

[def [package crimp::tk]]

[list_begin definitions]
[def [file crimp_tk.tcl]]
[def [file policy_tk.tcl]]
[def [file plot.tcl]]
[def [file format/*tk*.crimp]]
[list_end]

[list_end]

[list_end][comment {___1___}]


[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Writing a new primitive}]

The individual primitive C level operations of CRIMP are found in the
sub-directories [file core/], [file operator/], and [file format/].
See the [sectref {Directory structure}].

[para]
Each primitive is handled by a single file with the extension [file .crimp].

[para]

Note that all files found in these directories and which do not have the
extension [file .crimp] are by default ignored when [file crimp.tcl] loads
and processes the primitives. The exception is if a package policy file
declares them to be a part of the package in question.

[para]

To write a new primitive simply add a new file with the extension [file .crimp]
to the directory and fill it with content according to the rules below, which
specify the format of [file .crimp] files.

[list_begin enumerated]

[enum]
A [file .crimp] file is a plain text file.

[enum]
The first line in the file contains the name of the primitive it implements.

[enum]

All following lines, until the first empty line, describe the arguments of
the primitive, i.e. their types and names.

Note that a line containing only whitespace (space and tab characters) is
[emph not] empty.

[enum]
Each line in the argument block describes a single argument.

[enum]
All lines after the empty line terminating the argument block, to the end of
the file, contain the C code implementing the primitive.

[list_end]

As an example, here are the contents of the [file .crimp] file for one of
the primitives with one of the smallest implementations:

[example {
[1]     width
[2]     Tcl_Obj* imageObj
[3]
[4]     crimp_image* image;
[5]
[6]     crimp_input_any (imageObj, image);
[7]
[8]     Tcl_SetObjResult (interp, Tcl_NewIntObj (image->w));
[9]     return TCL_OK;
}]

Line 1 contains the name of the primitive, "width".
Line 2 is the first line of the argument block.
Line 3 terminates this argument block.
Lines 4 to 9 are the implementation.

[para]

This specific primitive extracts the width from the image it was given as
argument and returns it as its result.

[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Writing a new high-level command}]

The high-level commands wrapping around most of the C level primitives
reside in the files matching the pattern [file "policy*.tcl"].

[para]

They usually have one of the following purposes:

[para]

[list_begin enumerated]

[enum] Aggregating a group of related primitives into a single command
    which chooses the primitive to use automatically, based on the
    type(s) of its image argument(s).

    The command [cmd {::crimp max}] is an example of this, choosing
    and dispatching to the group of [cmd max_*_*] primitives.

[enum] A nicer (more tcl-ish) interface to a (group of) primitive(s).

    The command [cmd {::crimp meta}] is an example of that,
    implementing a dict-like API on top of the raw [cmd meta_set] and
    [cmd meta_get] primitives.

[enum] Convenience methods which aggregate other commands, not
    necessarily primitives, into a larger functionality.

    The group of [cmd {::crimper filter sobel}] methods is an example of
    this, wrapping around [cmd {::crimp filter convolve}] (itself an example
    of (1)) and the commands for creating convolution kernels,
    implementing a specific well-known filter with a fixed kernel.

[enum] Implementing functionality fully in Tcl, where primitives are not
    needed, or mostly not.

    The [cmd {::crimp transform}] and [cmd {::crimp table}] commands
    are examples of this, computing projective transformations and pixel
    mapping tables, respectively.

    A better example might be the "::crimp pyramid" methods which
    encapsulate the higher-order structure of image pyramid
    processing, leaving the details callback commands.

[list_end]

Their implementation has to obey the following rules:

[list_begin enumerated]

[enum] The CRIMP package has the namespace "::crimp" reserved for its
    use. All new procedures have to be defined in this namespace, or
    sub-ordinate namespaces.

[enum] New procedures extending an existing ensemble have to be defined
    in the namespace of that ensemble. (Rule (1) above could have been
    subsumed into this, because the main command, "::crimp", is an
    ensemble).

[enum] Any new command defined directly in the "::crimp" namespace,
    i.e. at the top-level of the hierarchy, has to be listed in the
    [cmd {namespace export}] clauses at the bottom of file [file policy.tcl].

[enum] Public procedures have to have a name starting with a lowercase
    character.

[enum] Internal procedures have to have a name starting with an uppercase
    character.

[list_end]

[comment {
<<TODO>>    Document patterns among the existing commands ?
<<TODO>>    Document the most important helper functions (TypeOf, Has, List)

[enum] Explicit dispatch - (extract image type -> search primitive for
    the type -> call primitive, or throw error).

[enum] Implicit dispatch through ensemble, with image type information
    part of the method name (namespace path).
(2a) Generated ensemble, using image type in the namespace name, and
     code with placeholders.
}]

[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Writing a new demo}]

The individual demos used by [file demos.tcl] reside in the
sub-directory [file demos/] of the sources.

[para]

Each demo is handled by a single file with the extension ".tcl".

[para]

Note that all files found in the directory and which do not have the
extension [file .tcl] are ignored when [file demos.tcl] looks for
demos it can use.

[para]

To write a new demo simply add a new file with the extension
[file .tcl] to the directory and fill it with content according to the
rules below, which specify the format of the demo files.

[para]
[list_begin enumerated]

[enum]	A demo file is a Tcl script. As such it is a plain text file.

[enum]	A demo file contains a single command "def", taking two arguments,
	the name of the demo, and a Tcl dictionary describing it.

[enum]	The dictionary describing the demo may contain the keys and values
	listed below. Some of the keys must exist, others are optional.
	Both will be noted in the desciptions of the keys, below.

[list_begin definitions]
    [def label]
        Must exist. Its value is the name of the demo, as shown to
        and seen by the user of [file demos.tcl].

    [def active]
        Optional. Its value is a script which will be executed by
        demos.tcl whenever it has to decide which demos to show in the
        list, based on the selection of images. The result has to be a
        boolean value, with True signaling that the demo is suitable
        for the selection, and False that it should not be shown.

    [def setup]
        Optional. Its value is a script which is run whenever this
        demo has been chosen by the user. It is expected to create
        any commands and state it may need during the processing
        of an image.

    [def shutdown]
        Optional. Its value is a script which is run whenever this
        demo has been de-selected by the user (and possibly some other
        demo chosen). It is expected to clean up any dynamic resources
        the demo may have aquired (like timers, open files, etc.).

        The script does not have to care about procedures and state in
        the ::DEMO namespace. These are automatically destroyed by the
        framework.

    [def setup_image]
        Optional, technically. Its value is a script which is run
        whenever the image for the demo has changed. Its
        responsibility is to apply the demo to the image and show any
        results. As such leaving this key out of the description makes
        pretty much no sense at all.
[list_end]

[enum]	All scripts (see demo description, above) are executed within the
	::DEMO namespace and have access to its variables and commands

[enum]	The demo framework exports a number of supporting commands for use
	by the scripts in the individual demos. These are:

[list_begin definitions]
    [call [cmd crimp]]
        Of course, as demos have to have access to CRIMP's
        functionality. All known crimp packages are loaded, i.e.

	[list_begin enumerated]
	[enum] [package crimp]
	[enum] [package crimp::tk]
	[enum] [package crimp::bmp]
	[enum] [package crimp::pgm]
	[enum] [package crimp::pfm]
	[enum] [package crimp::ppm]
	[list_end]

    [call [cmd base] [opt [arg N]]]
        Returns the N'th image selected by the user. Counted from 0.
        If not specified 'N' defaults 0.

    [call [cmd bases]]
        Returns the number of selected images. Most useful to the
        'active' script.

    [call [cmd thebases]]
        Returns a list containing all selected images.

    [call [cmd show_image] [arg I]]
        Takes an image I and displays it in the demo result area for
        the user to see.

    [call [cmd show_slides] [arg LI]]
        Takes a list of images and displays them in the demo result
        area for the user to see, as a slideshow which cycles through
        the images. The user gets a bevy of buttons to start/stop the
        cycling, change cycle interval, and direction.

    [call [cmd log] [arg T]]
        Writes the text T to the demo log window, followed by a newline

    [call [cmd log*] [arg T]]
        Writes the text T to the demo log window. No newline is added
        after the text.
[list_end]

[enum]	The demo framework has a number of hook points in the GUI for use
	by demos. These are:

[list_begin itemized]
[item]    .left
[item]    .right
[item]    .top
[item]    .bottom
[list_end]

    These widgets are ttk::frames placed to the left, right, top and
    bottom of the demo result area and usually empty. The demo can put
    its own interface elements there, buttons, sliders, plots, etc. pp.

    When not empty the layout roughly looks like:

[para][image demo_gui_layout][para]

    The demo's UI elements underneath these hooks are automatically
    destroyed when the demo is shut down, before its 'shutdown' script
    is run.

[list_end]

[comment @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@]
[subsection {Adding a new demo image}]

The individual demonstration images used by [file demos.tcl] reside in
the sub-directory [file image/] of the sources.

[para]

Each image is handled by a single file with the extension [file .png],
whose contents have to be in the PNG image file format.

[para]

Note that all files found in the directory, and which do not have the
extension [file .png], are ignored when [file demos.tcl] looks for
images it can use.

[para]

To add a new image simply copy the image file into the directory,
assuming that it has the correct extension and file format. Otherwise
convert the image to PNG and change the extension to suit.

[manpage_end]

