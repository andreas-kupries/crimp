border_rgba_mirror
Tcl_Obj* imageObj
int ww
int hn
int we
int hs

/*
 * Border expansion by mirroring along the edges, also called reflective
 * expansion.
 */

crimp_image* image;
crimp_input (imageObj, image, rgba);

/*
 * This is the simple definition. Might be better to generate macros
 * specialized to each quadrant. Except, even they have to perform modulo
 * arithmetic, as the border may be larger than image's width or height,
 * causing muliple wrapping.
 */

#define FILL(xo,yo) {						   \
	int xi = xo - ww;					   \
	int yi = yo - hn;					   \
	while (1) {						   \
	    if      (xi < 0)         { xi = 0              - xi; } \
	    else if (xi >= image->w) { xi = 2*(image->w-1) - xi; } \
	    else break;						   \
	}							   \
								   \
	while (1) {						   \
	    if      (yi < 0)         { yi = 0              - yi; } \
	    else if (yi >= image->h) { yi = 2*(image->h-1) - yi; } \
	    else break;						   \
	}							   \
								   \
	R (result, xo, yo) = R (image, xi, yi);			   \
	G (result, xo, yo) = G (image, xi, yi);			   \
	B (result, xo, yo) = B (image, xi, yi);			   \
	A (result, xo, yo) = A (image, xi, yi);			   \
    }

#define COPY(xo,yo,xi,yi) {			\
	R (result, xo, yo) = R (image, xi, yi); \
	G (result, xo, yo) = G (image, xi, yi); \
	B (result, xo, yo) = B (image, xi, yi); \
	A (result, xo, yo) = A (image, xi, yi); \
    }

#include <border_op.c>

/* vim: set sts=4 sw=4 tw=80 et ft=c: */
/*
 * Local Variables:
 * mode: c
 * c-basic-offset: 4
 * fill-column: 78
 * End:
 */
