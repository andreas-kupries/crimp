crimp_primitive map_hsv {
    image_hsv image
    image_grey8 hueMap
    image_grey8 satMap
    image_grey8 valMap
} image {
    /*
     * This operation is a generalized per-pixel transformation, mapping
     * pixel values to other pixel values in a completely arbitrary way.
     * Inversion, partial inversion, histogram equalization, etc. all are
     * possible through this.
     *
     * Important: For the sake of convenience the map is not provided as a
     * (Tcl) list (of values), or array, but as an _image_ itself, a 256x1
     * (WxH) grey8. We will have constructors for such images.
     *
     * The same approach will be used by the conditional mappers where the
     * transformation of one channel in a multi-channel image will be
     * controlled by data in a second channel, this can be represented as
     * a 256x256 grey8 image, each row the map to be used for one of the
     * possible controlling values.
     */

    crimp_image*     result;
    int              x, y;

    if (!crimp_require_dim (hueMap, 256, 1)) {
        Tcl_SetResult(interp, "bad image dimension for hue map, expected 256x1", TCL_STATIC);
        return NULL;
    }

    if (!crimp_require_dim (satMap, 256, 1)) {
        Tcl_SetResult(interp, "bad image dimension for saturation map, expected 256x1", TCL_STATIC);
        return NULL;
    }

    if (!crimp_require_dim (valMap, 256, 1)) {
        Tcl_SetResult(interp, "bad image dimension for value map, expected 256x1", TCL_STATIC);
        return NULL;
    }

    result = crimp_new_like (image);

    for (y = 0; y < crimp_h (result); y++) {
        for (x = 0; x < crimp_w (result); x++) {

	    /*
	     * Run the pixel value of the input image through the map to
	     * produce the value for the output.
	     */

          H (result, x, y) = GREY8 (hueMap, H (image, x, y), 0);
          S (result, x, y) = GREY8 (satMap, S (image, x, y), 0);
          V (result, x, y) = GREY8 (valMap, V (image, x, y), 0);
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
