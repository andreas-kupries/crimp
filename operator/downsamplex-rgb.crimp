crimp_primitive downsamplex_rgb {
    image_obj_rgb image
    int      factor
} object0 {
    /*
     * The input image is downsampled in the x direction by storing only every
     * 'factor' pixel into the result. Note that this method of shrinking an image
     * causes image frequencies above the nyquist threshold of the result to be
     * aliased into the range.
     *
     * The input image has to be convolved with a low-pass filter first, to avoid
     * such artefacts. The integrated combination of such a filter with
     * downsampling is called 'decimation'. This is but one step in the generation
     * of image pyramids.
     */

    crimp_image* result;
    int          xo, y, xi;

    if (factor < 1) {
        Tcl_SetResult(interp, "bad sampling factor, expected integer > 0", TCL_STATIC);
        return NULL;
    }

    if (factor == 1) {
        return image.o;
    }

    result = crimp_new_at (image.i->itype, crimp_x (image.i), crimp_y (image.i), crimp_w (image.i)/factor, crimp_h (image.i));

    for (y = 0; y < crimp_h (result); y++) {
        for (xo = 0, xi = 0; xo < crimp_w (result); xo++, xi += factor) {

	    R (result, xo, y) = R (image.i, xi, y);
	    G (result, xo, y) = G (image.i, xi, y);
	    B (result, xo, y) = B (image.i, xi, y);
        }
    }

    return crimp_new_image_obj(result);

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
