matrix
Tcl_Obj* imageObj Tcl_Obj* matrixObj

int objc;
Tcl_Obj **rowv, **colv;
double matrix[3][3];

if (Tcl_ListObjGetElements(interp, matrixObj, &objc, &rowv) != TCL_OK) {
    return TCL_ERROR;
} else if (objc != 3) {
    Tcl_SetResult(interp, "invalid matrix format", TCL_STATIC);
    return TCL_ERROR;
}

int i, j;
for (i = 0; i < 3; ++i) {
    if (Tcl_ListObjGetElements(interp, rowv[i], &objc, &colv) != TCL_OK) {
        return TCL_ERROR;
    } else if (objc != 3) {
        Tcl_SetResult(interp, "invalid matrix format", TCL_STATIC);
        return TCL_ERROR;
    }
    for (j = 0; j < 3; ++j) {
        if (Tcl_GetDoubleFromObj(interp, colv[j], &matrix[i][j]) != TCL_OK) {
            return TCL_ERROR;
        }
    }
}

double cofact[3][3], invert[3][3];
double det = 0;
double sign = 1;
for (i = 0; i < 3; ++i) {
    int i1 = !i, i2 = 2 - !(i - 2);
    for (j = 0; j < 3; ++j) {
        int j1 = !j, j2 = 2 - !(j - 2);
        cofact[i][j] = sign * (matrix[i1][j1] * matrix[i2][j2]
                             - matrix[i1][j2] * matrix[i2][j1]);
        sign = -sign;
    }
    det += matrix[i][0] * cofact[i][0];
}
if (det == 0) {
    Tcl_SetResult(interp, "singular matrix", TCL_STATIC);
    return TCL_ERROR;
}
for (i = 0; i < 3; ++i) {
    for (j = 0; j < 3; ++j) {
        invert[i][j] = cofact[j][i] / det;
    }
}

int w, h;
unsigned char *pixels;
if (decodeImageObj(interp, imageObj, &w, &h, &pixels) != TCL_OK) {
    return TCL_ERROR;
}

Tcl_Obj *dataObj = Tcl_NewByteArrayObj(NULL, 4 * w * h);
unsigned char (*in)[h][w][4] = (unsigned char (*)[h][w][4])pixels;
unsigned char (*out)[h][w][4] = (unsigned char (*)[h][w][4])
        Tcl_GetByteArrayFromObj(dataObj, NULL);

int oy, ox, c, iy, ix;
double oyf, oxf;
for (oy = 0, oyf = -1; oy < h; ++oy, oyf += 2.0 / h) {
    for (ox = 0, oxf = -1; ox < w; ++ox, oxf += 2.0 / w) {
        double ixf = (invert[0][0] * oxf + invert[0][1] * oyf + invert[0][2]);
        double iyf = (invert[1][0] * oxf + invert[1][1] * oyf + invert[1][2]);
        double iwf = (invert[2][0] * oxf + invert[2][1] * oyf + invert[2][2]);
        ixf = ((ixf / iwf) + 1) * w / 2;
        iyf = ((iyf / iwf) + 1) * h / 2;
        int ixw = ixf;
        int iyw = iyf;
        ixf -= ixw;
        iyf -= iyw;
        for (c = 0; c < 4; ++c) {
            float val = 0;
            for (iy = MAX(iyw, 0); iy < MIN(iyw + 2, h); ++iy) {
                iyf = 1 - iyf;
                for (ix = MAX(ixw, 0); ix < MIN(ixw + 2, w); ++ix) {
                    ixf = 1 - ixf;
                    val += (*in)[iy][ix][c] * iyf * ixf;
                }
            }
            (*out)[oy][ox][c] = val;
        }
    }
}

Tcl_Obj *list[] = {Tcl_NewIntObj(w), Tcl_NewIntObj(h), dataObj};
Tcl_SetObjResult(interp, Tcl_NewListObj(3, list));
return TCL_OK;

/* vim: set sts=4 sw=4 tw=80 et ft=c: */
