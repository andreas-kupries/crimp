indicator_grey8_float
Tcl_Obj* imageObj
int testValue
float equalValue
float notEqualValue

/*
 * Computes an 'indicator function' for an image.
 *
 * The transfer function is 
 *	outputPixel = (inputPixel == testValue) ? equalValue : notEqualValue
 *
 * Copyright (c) 2011 by Kevin B. Kenny.
 *
 * See the file "license.terms" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

crimp_image* image;		/* Image to segment */
crimp_image* result;		/* Resulting label image */
unsigned char trial;		/* Background pixel value */
int width;
int height;
int x, y;

/* Process inputs */

crimp_input(imageObj, image, grey8);
width = image->w;
height = image->h;
trial = (unsigned char) testValue;

/* Make the output image */

result = crimp_new_float(width, height);
for (y = 0; y < height; ++y) {
    for (x = 0; x < width; ++x) {
	FLOATP(result, x, y) =
	    ((GREY8(image, x, y)) == trial) ? equalValue : notEqualValue;
    }
}

/* Return indicator function to caller */

Tcl_SetObjResult(interp, crimp_new_image_obj(result));
return TCL_OK;

/* vim: set sts=4 sw=4 tw=80 et ft=c: */
/*
 * Local Variables:
 * mode: c
 * c-basic-offset: 4
 * fill-column: 78
 * End:
 */
