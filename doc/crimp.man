[comment {-*- tcl -*- doctools manpage}]
[manpage_begin crimp n 1.0.1]
[copyright {2010 Andreas Kupries}]
[copyright {2010 Documentation, Andreas Kupries}]
[moddesc   {Image Manipulation}]
[titledesc {Image Manipulation (not yet independent of Tk)}]
[require Tcl 8.5]
[require Tk 8.5]
[require crimp [opt 1]]
[description]

This package provides image manipulation commands which are mostly
independent of Tk. The only parts currently depending on Tk are for
the import and export of images from and to Tk photos, necessary for
display.

[para]

Note that the intended audience of this document are the users of
[package crimp]. Developers wishing to work on the internals of the
package, but unfamiliar with them, should read ... instead.

[section Images]

Images are values. This means that they have a string
representation. It is however strongly recommended to not access this
representation at all, and to only use the accessor commands provided
by crimp to obtain the information stored in the internal
representation of image values.

[para]

The reason behind this is simple: Memory and speed. Images can be
large. Generating the string representation from the internal one
roughly doubles the memory needed to store it, actually a bit more,
due to the necessary quoting of bytes in UTF-8 and list-quting them as
well. Furthermore such a conversion takes time, roughly proportional
to the size of the image itself, in either direction. Properly
accessing the image information without the package's accessor
commands requires list commands. This causes the loss of the internal
representation, thus forcing later a reconversion to the image's
internal represention when it is used as image again. I.e. the
shimmering forces us to convert twice.

[para]

Therefore, avoid this, use only the crimp commands to access the
images. The only part of them you are not able to access through these
is the pixel data. And requiring access to that in a Tcl script is,
IMHO, highly unusual. In such a situation it is likely better and
easier to simply become a developer and extend the C level parts of
crimp with the operation which would have required that access.

[section {Image Types}]

Each image has a [term type], a string implicitly describing features
like the colorspace the image is in, the number of (color) channels,
the domain, i.e. bit-depth, of pixel values in the channels, etc.

[para]

All type strings have the form [const crimp::image::][var foo].

[para]

The package currently knows the following types:

[list_begin definitions]
[def [const rgba]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		4, named "red", "green", and "blue",
				plus an "alpha" channel controlling
				pixel opacity.
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const rgb]]
	[list_begin definitions]
	[def Colorspace]	RGB also known as Red, Green, and Blue.
	[def Channels]		3, named "red", "green", and "blue".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const hsv]]
	[list_begin definitions]
	[def Colorspace]	HSV, also known as Hue, Saturation, and Value.
	[def Channels]		3, named "hue", "saturation", and "value".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	3 bytes.
	[list_end]
[def [const grey8]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		1 byte/channel (8 bit, values 0-255).
	[def Pixel-size]	1 byte.
	[list_end]
[def [const grey16]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		2 byte/channel (16 bit, values 0-65,535).
	[def Pixel-size]	2 bytes.
	[list_end]
[def [const grey32]]
	[list_begin definitions]
	[def Colorspace]	Greyscale.
	[def Channels]		1, named "luma".
	[def Bit-depth]		4 byte/channel (16 bit, values 0-4,294,967,296).
	[def Pixel-size]	4 bytes.
	[list_end]
[def [const bw]]
	[list_begin definitions]
	[def Colorspace]	Binary.
	[def Channels]		1, named "bw".
	[def Bit-depth]		1 bit/channel.
	[def Pixel-size]	1 byte. I.e. 7 bits/channel are wasted.
	[list_end]
[list_end]

Support for the various types varies by operation. The exact image
types supported by each operation are listed the operation's
description. Invoking an operation for a type it doesn't support will
generally cause it to throw an error.


[section {General design}]

All commands operate in a pipeline fashion, taking zero or more image
values, zero or more other arguments, and returning zero or more
images or other values. None are operating in place, i.e. taking an
image variable and writing back to it.

[para]

They fall, into five categories, namely:

[list_begin definitions]
[def Accessors]

They take one or more images, extract information about them, and
return this information as their result. This can be a simple as
querying the image's height, to something as complex as counting pixel
values for a histogram.

[para]

The list of accessors, their syntax, and detailed meaning can be found
in section [sectref Accessors].


[def Manipulators]

These take an image and transform its contents in some way, leaving
the image type unchanged. Examples of commands in category are
inversion, gamma conversion, etc.

[para]

The list of manipulators, their syntax, and detailed meaning can be
found in section [sectref Manipulators].


[def Converters]

Similar to manipulators, except that they change the image's type,
preserving the content instead. Here reside operations like conversion
between the HSV and RGB colorspaces, to greyscale and back, etc.

[para]

The list of converters, their syntax, and detailed meaning can be
found in section [sectref Converters].


[def I/O]

Another variant of the same theme, i.e. akin to converters and
manipulators, yet not the same, these commands read and write images
from and to files or other data structures. I.e. they convert between
different serializations of image content and type.

[para]

The list of I/O commands, their syntax, and detailed meaning can be
found in section [sectref {I/O commands}].


[def Support]

Lastly, but not leastly a number of commands, which, while not image
commands themselves, support the others.

[para]

The list of supporting commands, their syntax, and detailed meaning
can be found in section [sectref Support].


[list_end]


[section API]
[subsection Accessors]
[list_begin definitions]
[call [cmd ::crimp] [method channels] [arg image]]
[keywords channels]

This method returns a list containing the names of the channels in the
[arg image]. The order of channels is the same as expected by the
[method remap] method.

[para] The method supports all image types.


[call [cmd ::crimp] [method dimensions] [arg image]]
[keywords dimensions]

This method returns the width and height of the [arg image] (in
pixels).  The result is a 2-element list containing width and height,
in this order.

[para] The method supports all image types.


[call [cmd ::crimp] [method height] [arg image]]

This method returns the height of the [arg image] (in pixels).

[para] The method supports all image types.


[call [cmd ::crimp] [method histogram] [arg image]]
[keywords histogram]

This method returns a nested dictionary as its result.  The outer
dictionary is indexed by the names of the channels in the [arg image].
Its values, the inner dictionaries, are indexed by pixel value. The
associated values are the number of pixels with that value.

[para] The method supports all image types except "grey32".  Under the
current system the result would be a dictionary with 2^32 keys and
values, taking up, roughly, 192 GiByte of memory in the worst case,
and 96 GiByte in best case (all counter values shared in a single
object).


[call [cmd ::crimp] [method statistics] [arg image]]
[keywords statistics min max median stddev variance]

This method returns a nested dictionary as its result. The outer dictionary
contains basic information about the image, see the list of keys below.
The inner dictionaries hold data about each (color) channel in the image,
namely histogram and derived data like minumum pixel value, maximum, etc.

[list_begin definitions]
[def [const channels]]   List of the names for the channels in the image.
[def [const dimensions]] 2-element list holding image width and height, in
                         this order.
[def [const height]]     Image height as separate value.
[def [const pixels]]     Number of pixels in the image, the product of
                         its width and height.
[def [const type]]       Type of the image.
[def [const width]]      Image width as separate value.
[def [const {channel *}]]
                         Per channel named in key [const channels], where
                         [const *] is the place holder for the channel name.
                         A dictionary holding the statistics for that channel.
[list_begin definitions]
[def [const min]]        The minimal pixel value with a non-zero population.
[def [const max]]        The maximal pixel value with a non-zero population.
[def [const mean]]       The arithmetic mean of pixel values.
[def [const median]]     The median pixel value.
[def [const stddev]]     The standard deviation of pixel values.
[def [const variance]]   The variance of pixel values, square of the standard
                         deviation.
[def [const histogram]]  A dictionary mapping pixel values to population counts.
[def [const hf]]         The histogram reduced to the population counts, sorted
                         by pixel value to direct indexing into the list by
                         pixel values.
[def [const cdf]]        The [term {cumulative density function}] of pixel
                         values. The discrete integral of [const hf].
[def [const cdf255]]     Same as [const cdf], except scaled down so that the
                         last value in the series is 255.
[list_end]
[list_end]

[para] The method supports all image types except "grey32".  Under the
current system the result would contain internal dictionaries with 2^32 keys
and values, taking up, roughly, 192 GiByte of memory in the worst case,
and 96 GiByte in best case (all counter values shared in a single
object).


[call [cmd ::crimp] [method type] [arg image]]

This method returns the type of the [arg image].

[para] The method supports all image types.


[call [cmd ::crimp] [method width] [arg image]]

This method returns the width of the [arg image] (in pixels).

[para] The method supports all image types.

[list_end]


[subsection Manipulators]
[list_begin definitions]
[call [cmd ::crimp] [method {alpha blend}] [arg foreground] [arg background] [arg alpha]]
[keywords blending {alpha blending}]

This method takes two images of identical dimensions and a blending
factor [arg alpha] and returns an image which is a mix of both, with
each pixel blended per the formula

[para][image blend]
[para]

or, alternatively written

[para][image blend_alt]
[para]

This means that the [arg foreground] is returned as is for
"[arg alpha] == 255", and the [arg background] for
"[arg alpha] == 0".

I.e. the argument [arg alpha] controls the [term opacity] of the
foreground, with [const 1] and [const 0] standing for "fully opaque"
and "fully transparent", respectively.

[para]

The following combinations of fore- and background image types are
supported:

[example {
    Result = Foreground Background 
    ------   ---------- ---------- 
    grey8    grey8      grey8
    hsv      hsv        hsv
    rgb      rgb        grey8
    rgb      rgb        rgb
    rgb      rgb        rgba
    rgba     rgba       grey8
    rgba     rgba       rgb
    rgba     rgba       rgba
    ------   ---------- ----------
}]


[call [cmd ::crimp] [method {alpha set}] [arg image] [arg mask]]
[keywords alpha {alpha channel}]

This command takes two images, the input and a [arg mask], and returns
an image as result in which the mask is the alpha channel of the
input.

The result is therefore always of type [const rgba], as the only type
supporting an alpha channel.

[para] The input image can be of type [const rgb] or [const rgba].  In
case of the latter the existing alpha channel is replaced, in case of
the former an alpha channel is added.

[para] For the mask images of type [const grey8] and [const rgba] are
accepted.  In the case of the latter the mask's alpha channel is used
as the new alpha channel, in case of the former the mask itself is
used.


[call [cmd ::crimp] [method {alpha opaque}] [arg image]]

A convenience method over [method {alpha set}], giving the [arg image]
a mask which makes it fully opaque.


[call [cmd ::crimp] [method {alpha over}] [arg foreground] [arg background]]
[keywords composition {composite blending}]

This method is similar to [method blend] above, except that there is
no global blending parameter. This information is taken from the
"alpha" channel of the [arg foreground] image instead. The blending
formula is the same, except that the alpha parameter is now a
per-pixel value, and not constant across the image.

[para]

Due to the need for an alpha channel the [arg foreground] has to be of
type [const rgba]. For the [arg background] image the types
[const rgb] and [const rgba] are supported.


[call [cmd ::crimp] [method blank] [arg type] [arg width] [arg height] [arg value]...]

This method returns a blank image of the given image type and
dimensions.  The [arg value]s after the dimensions are the pixel
values to fill the pixels in the image's channels with, per its type.

[para] This method currently support only the types [const rgb],
[const rgba], and [const grey8].


[call [cmd ::crimp] [method crop] [arg image] [arg ww] [arg hn] [arg we] [arg hs]]
[keywords cropping shrinking resize {edge shrinking}]

This method is the counterpart to the [method expand] family of
methods, shrinking an [arg image] by removing a border.

The size of this border is specified by the four arguments [arg ww],
[arg hn], [arg we], and [arg hs] which provide the number of pixels to
remove from the named edge. See the image below for a graphical
representation.

[para][image border][para]


[call [cmd ::crimp] [method cut] [arg image] [arg x] [arg y] [arg w] [arg h]]
[keywords {cut region} {region cut} {rectangle cut} {rectangle extraction}]
[keywords {extract rectangle} {extract region}]

This method cuts the rectangular region specified throught its [arg x]/[arg y]
position relative to the upper-left corner of the input [arg image] and its
dimensions, and returns it as its own image.


[call [cmd ::crimp] [method degamma] [arg image] [arg y]]
[keywords {gamma correction}]

This method takes an image, runs it through an
[fun {inverse gamma correction}] with parameter [arg y], and returns
the corrected image as it result.

This is an application of method [method remap], using the mapping
returned by "[method {map degamma}] [arg y]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method {expand const}] [arg image] [arg ww] [arg hn] [arg we] [arg hs] [opt [arg value]...]]
[call [cmd ::crimp] [method {expand extend}] [arg image] [arg ww] [arg hn] [arg we] [arg hs]]
[call [cmd ::crimp] [method {expand mirror}] [arg image] [arg ww] [arg hn] [arg we] [arg hs]]
[call [cmd ::crimp] [method {expand replicate}] [arg image] [arg ww] [arg hn] [arg we] [arg hs]]
[call [cmd ::crimp] [method {expand wrap}] [arg image] [arg ww] [arg hn] [arg we] [arg hs]]
[keywords expansion {const expansion} {extend expansion} {mirror expansion}]
[keywords {replicate edge expansion} {wrap expansion} {cyclic wrap expansion} {toroidal wrap expansion}]

This set of methods takes an image and expands it by adding a border.

The size of this border is specified by the four arguments [arg ww],
[arg hn], [arg we], and [arg hs] which provide the number of pixels to
add at the named edge. See the image below for a graphical
representation.

[para][image border][para]

The contents of the border's pixels are specified via the border type,
the first argument after [method expand], as per the list below.

[list_begin definitions]
[def [method const]]

The additional [arg value]s specify the values to use for the color
channels of the image. Values beyond the number of channels in the
image are ignored.

Missing values are generated by replicating the last value, except for
the alpha channel, which will be set to [const 255]. If no values are
present they default to [const 0].

[def [method extend]]

This is a combination of [method mirror] and [method replicate].  The
outside pixels are the result of subtracting the outside pixel for
[method mirror] from the outside pixel for [method replicate] (and
clamping to the range [lb]0...255[rb]).

[def [method mirror]]

The outside pixels take the value of the associated inside pixels,
found by reflecting its coordinates along the relevant edges.

[def [method replicate]]

The outside pixels take the value of the associated edge pixels, i.e.
replicating them into the border.

[def [method wrap]]

The outside pixels take the value of the associated inside pixels,
found by toroidial (cyclic) wrapping its coordinates along the
relevant edges. This is also called tiling.

[list_end]


[call [cmd ::crimp] [method {filter convolve}] [opt "[option -border] [arg spec]"] [arg kernel]...]
[keywords {convolution filter} filter]

This method runs the series of filters specified by the convolution
[arg kernel]s over the input and returns the filtered result. See the
method [method kernel] and its sub-methods for commands to create and
manipulate suitable kernels.

[para] The border specification determines how the input image is
expanded (see method [method expand]) to compensate for the shrinkage
introduced by the filter itself. The [arg spec] argument is a list
containing the name of the sub-method of [method expand] to use, plus
any additional arguments this method may need, except for the size of
the expansion.

[para] By default a black frame is used as the border, i.e.
"[arg spec] == {const 0}".


[call [cmd ::crimp] [method {filter rank}] [opt "[option -border] [arg spec]"] [opt "[arg radius] [opt [arg percentile]]"]]
[keywords filter {rank-order filter} {max-filter} {min-filter} {median-filter}]

This method runs a rank-filter over the input and returns the filtered
result.

[para] The border specification determines how the input image is
expanded (see method [method expand]) to compensate for the shrinkage
introduced by the filter itself. The [arg spec] argument is a list
containing the name of the sub-method of [method expand] to use, plus
any additional arguments this method may need, except for the size of
the expansion.

[para] By default a black frame is used as the border, i.e.
"[arg spec] == {const 0}".

[para] The [arg radius] specifies the (square) region around each
pixel which is taken into account by the filter, with the pixel value
selected according to the [arg percentile]. The filter region of each
pixel is a square of dimensions "2*[arg radius]+1", centered around
the pixel.

[para] These two values default to [const 3] and [const 50], respectively.

[para] Typical applications of rank-filters are min-, max-, and
median-filters, for percentiles 0, 100, and 50, respectively.

[para] Note that percentiles outside of the range [const 0]...[const 100]
make no sense and are clamped to this range.


[call [cmd ::crimp] [method gamma] [arg image] [arg y]]

This method takes an image, runs it through a [fun {gamma correction}]
with parameter [arg y], and returns the corrected image as it result.

This is an application of method [method remap], using the mapping
returned by "[method {map gamma}] [arg y]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method invert] [arg image]]
[keywords inversion]

This method takes an image, runs it through the [fun inverse]
function, and returns the modified image as it result.

This is an application of method [method remap], using the mapping
returned by "[method {map inverse}]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method matrix] [arg image] [arg matrix]]
[keywords matrix {projective transform} transform {affine transform}]

This method takes an image and a 3x3 matrix specified as nested Tcl
list (row major order), applies the projective transform represented
by the matrix to the image and returns the transformed image as its
result.

[para]

Notes: It is currently unclear how the output pixel is computed
(nearest neighbour, bilinear, etc.) (code inherited from AMG). This
requires more reading, and teasing things apart. The transfomred image
is clipped to the dimensions of the input image, i.e. pixels from the
input may be lost, and pixels in the output may be unset as their
input would come from outside of the input.

[para]

The operation supports only images of type [const rgba], and returns
images of the same type.


[call [cmd ::crimp] [method psychedelia] [arg width] [arg height] [arg frames]]

This method creates an [const rgba] image of the specified dimensions
according to an algorithm devised by Andrew M. Goth. The [arg frames]
argument specifies how many images are in the series.

[para][emph Attention:] This method keeps internal global state,
ensuring that each call returns a slightly different image. Showing a
series of such images as animation provides an effect similar to a
lava lamp or hallucination.


[call [cmd ::crimp] [method {pyramid run}] [arg image] [arg steps] [arg stepcmd]]

This method provides the core functionality for the generation of image
pyramids. The command prefix [arg stepcmd] is run [arg steps] times,
first on the [arg image], then on the result of the previous step.

[para] The assumed signature of [arg stepcmd] is
[list_begin definitions]
[call [cmd <stepcmd>] [arg image]]

which is expected to return a list of two elements. The first element
([term result]) is added to the pyramid in building, whereas the second
element ([term iter]) is used in the next step as the input of the step
command.

[list_end]

[para] The final result of the method is a list containing the input
[arg image] as its first element, followed by the results of the step
function, followed by the [term iter] element returned by the last step,
"[arg steps]+2" images in total.

[para][image pyramid]


[call [cmd ::crimp] [method {pyramid gauss}] [arg image] [arg steps]]

This method generates a gaussian image pyramid [arg steps] levels deep and
returns it as a list of images.

[para] The first image in the result is the input, followed by [arg steps]
successively smaller images, each [method decimate]d by a factor two
compared to its predecessor, for a total length of "[arg steps]+1" images.

[para] The convolution part of the decimation uses

[example { 1/16 [1 4 6 4 1] }]

as its kernel.

[para][image pyramid_gauss]


[call [cmd ::crimp] [method {pyramid laplace}] [arg image] [arg steps]]

This method generates a laplacian image pyramid [arg steps] levels deep and
returns it as a list of images.

[para] The first image in the result is the input, followed by [arg steps]
band pass images (differences of gaussians). The first band pass has the same
size as the input image, and each successor is [method decimate]d by two. This
is followed by one more image, the gaussian of the last step. This image has
the same dimensions as the preceding bandpass image. In total the result
contains "[arg steps]+2" images.

[para] The convolution part of the decimation uses

[example { 1/16 [1 4 6 4 1] }]

as its kernel. The internal interpolation used to generate the band pass
images (resynthesis) doubles the weights of this kernel for its convolution
step.

[para][image pyramid_laplace]


[call [cmd ::crimp] [method remap] [arg image] [arg map]...]
[keywords {pixel mapping} remapping]

[comment {one of three core -- remap-conditional, and recolor by 3x3 matrix}]

This method is the core primitive for the per-pixel transformation of
images, with each pixel (and channels within, if any) handled
independently of all others.

Applications of this operator provided by this package are (inverse)
gamma correction, pixel inversion, and solarization. Many more are
possible, especially when considering other colorspaces like
HSV. There, for example, it is possible change the saturation of
pixels, or shift the hue in arbitrary manner.

[para]

Beyond the input [arg image] to transform one or more [term maps] are
specified which define how each pixel value in the input is mapped to
a pixel value in the output. The command will accept at most that many
maps as the input image has channels.  If there are less maps than
channel the last map specified is replicated to cover the other
channels. An exception of this is the handling of the alpha channel,
should the input image have such. There a missing map is handle as
[fun identity], i.e. the channel copied as is, without changes.

[para]

The maps are not Tcl data structures, but images themselves.  They
have to be of type [const grey8], and be of dimension 256x1 (width by
height).

[para]

The [method {crimp map ...}] methods are sources for a number of
predefined maps.  And the [method {read tcl}] method allows the
construction of maps from Tcl data structures, namely nested lists.

[para] This method supports all image types with one or more
single-byte channels, i.e. all but [const grey16], [const grey32], and
[const bw].


[call [cmd ::crimp] [method solarize] [arg image] [arg threshold]]
[keywords solarization {sabattier effect}]

This method takes an image, runs it through the [fun solarize]
function with parameter [arg threshold], and returns the modified
image as it result. This is also known as the [term {sabattier effect}].

This is an application of method [method remap], using the mapping
returned by "[method {map solarize}] [arg threshold]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method threshold-ge] [arg image] [arg threshold]]
[keywords thresholding binarization]

This method takes an image, runs it through the [fun threshold-ge]
function with parameter [arg threshold], and returns the modified
image as it result. As the result only contains black and white,
i.e. 2 colors, this process is also called [term binarization].

This is an application of method [method remap], using the mapping
returned by "[method {map threshold-ge}] [arg threshold]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method threshold-le] [arg image] [arg threshold]]
[keywords thresholding binarization]

This method takes an image, runs it through the [fun threshold-le]
function with parameter [arg threshold], and returns the modified
image as it result. As the result only contains black and white,
i.e. 2 colors, this process is also called [term binarization].

This is an application of method [method remap], using the mapping
returned by "[method {map threshold-le}] [arg threshold]".

This method supports all image types supported by the method
[method remap].


[call [cmd ::crimp] [method wavy] [arg image] [arg offset] [arg adj1] [arg adjb]]

This method processes the input [arg image] according to an algorithm
devised by Andrew M. Goth, according to the three parameters
[arg offset], [arg adj1], and [arg adjb], and returns the modified
image as its result.

[para]

The operation supports only images of type [const rgba], and returns
images of the same type.


[call [cmd ::crimp] [method {flip horizontal}] [arg image]]
[call [cmd ::crimp] [method {flip transpose}] [arg image]]
[call [cmd ::crimp] [method {flip transverse}] [arg image]]
[call [cmd ::crimp] [method {flip vertical}] [arg image]]
[keywords flip transform]

This set of methods performs mirroring along the horizontal, vertical
and diagonal axes of the input [arg image], returning the mirrored
image as their output.  Transpose mirrors along the main diagonal,
transverse along the secondary diagonal.  These two methods also
exchange width and height of the image in the output.

[para] The methods currently support the image types [const rgb],
[const rgba], [const hsv], and [const grey8].

[list_end]


[subsection Converters]
[list_begin definitions]
[call [cmd ::crimp] [method {convert 2grey8}] [arg image]]
[call [cmd ::crimp] [method {convert 2hsv}] [arg image]]
[call [cmd ::crimp] [method {convert 2rgba}] [arg image]]
[call [cmd ::crimp] [method {convert 2rgb}] [arg image]]

This set of methods all convert their input [arg image] to the
specified type and returns it as their result.

[para]

The converters returning a [const grey8] image support [const rgb] and
[const rgba] as their input, using the ITU-R 601-2 luma transform to
merge the three color channels

[para]

The converters to HSV support [const rgb] and [const rgba] as their
input as well.

[para]

The conversion to [const rgba] accepts only [const hsv] as input,
adding a blank (fully opaque) alpha channel. For more control over the
contents of an image's alpha channel see the methods [method setalpha]
and [method {join rgba}].

[para]

At last, the conversion to [const rgb] accepts both [const rgba] and
[const hsv] images as input.


[call [cmd ::crimp] [method {join 2hsv}] [arg hueImage] [arg satImage] [arg valImage]]
[call [cmd ::crimp] [method {join 2rgba}] [arg redImage] [arg greenImage] [arg blueImage] [arg alphaImage]]
[call [cmd ::crimp] [method {join 2rgb}] [arg redImage] [arg greenImage] [arg blueImage]]

This set of methods is the complement of method [method split]. Each
take a set of [const grey8] images and fuse them together into an
image of the given type, with each input image becoming one channel of
the fusing result, which is returned as the result of the command. All
input images have to have the same dimensions.


[call [cmd ::crimp] [method split] [arg image]]

This method takes an image of one of the multi-channel types, i.e.
[const rgb], const rgba], and [const hsv] and returns a list of
[const grey8] images, each of which contains the contents of one of
the channels found in the input image.

[para]

The channel images in the result are provided in the same order as
they are accepted by the complementary [method join] method, see
above.

[list_end]


[subsection {I/O commands}]
[list_begin definitions]
[call [cmd ::crimp] [method {read tcl}] [arg pixelmatrix]]

This method takes the [arg pixelmatrix], a list of rows, with each row
a list of pixel values in the domain [lb]0..255[rb] and returns an
image of type [const grey8] whose height is the number of rows, i.e.
the length of the outer list, and whose width is the maximum length
found among the inner lists. Rows whose inner list is shorter than the
maximum length are padded with black pixels, i.e. a pixel value of
[const 255].


[call [cmd ::crimp] [method {read tk}] [arg photo]]

This method returns an image of type [const rgba] containing the data
from the specified Tk [arg photo] image.


[call [cmd ::crimp] [method {read pgm}] [arg string]]

This method returns an image of type [const grey8] containing the data
of the portable grey map (PGM) stored in the [arg string]. The method
recognizes images in both plain and raw sub-formats.


[call [cmd ::crimp] [method {read ppm}] [arg string]]

This method returns an image of type [const rgb] containing the data
of the portable pix map (PPM) stored in the [arg string]. The method
recognizes images in both plain and raw sub-formats.


[call [cmd ::crimp] [method {write 2tk}] [arg photo] [arg image]]

This method writes the input [arg image] to the specified Tk
[arg photo] image.

[para] The method supports the writing of [const rgb], [const rgba],
and [const grey8] images.


[call [cmd ::crimp] [method {write 2string}] [arg format] [arg image]]
[call [cmd ::crimp] [method {write 2chan}]   [arg format] [arg chan] [arg image]]
[call [cmd ::crimp] [method {write 2file}]   [arg format] [arg path] [arg image]]

This family of methods either returns the input [arg image] as a
binary string in the specified [arg format], or writes this string to
the open channel [arg chan], or the named file at [arg path].

[para] The image types accepted for writing are [arg format]
dependent, and listed below, with the supported formats.

[para] The currently supported formats are
[list_begin definitions]
[def [const pgm-plain]]

The plain ASCII format of portable grey maps, as per
[uri http://en.wikipedia.org/wiki/Netpbm_format].

[para] The methods support the writing of [const rgb], [const rgba],
[const hsv], and [const grey8] images.

[def [const pgm-raw]]

The raw binary format of portable grey maps, as per
[uri http://en.wikipedia.org/wiki/Netpbm_format].

[para] The methods support the writing of [const rgb], [const rgba],
[const hsv], and [const grey8] images.

[def [const ppm-plain]]

The plain ASCII format of portable pix maps, as per
[uri http://en.wikipedia.org/wiki/Netpbm_format].

[para] The methods support the writing of [const rgb], [const rgba],
[const hsv], and [const grey8] images.

[def [const ppm-raw]]

The raw binary format of portable pix maps, as per
[uri http://en.wikipedia.org/wiki/Netpbm_format].

[para] The methods support the writing of [const rgb], [const rgba],
[const hsv], and [const grey8] images.

[list_end]
[list_end]


[subsection Support]
[list_begin definitions]

[call [cmd ::crimp] [method {kernel make}] [arg matrix] [opt [arg scale]]]

This method takes a [arg matrix] of weights and an optional
[arg scale] factor and returns a structure containing the associated
convolution kernel, ready for use by method [method convole].

[para] If [arg scale] is left unspecified it defaults to the sum of
all weights in the matrix.

[para] The [arg matrix] has the same general format as the pixel
matrix for method [method {read tcl}], i.e. a list of lists (rows) of
values, and is treated in the same way, i.e. the number of columns is
the maxium length over the row lists, and shorter lists are padded
with [const 255].


[call [cmd ::crimp] [method {kernel transpose}] [arg kernel]]

This method takes a [arg kernel] as returned by the method
[method {kernel make}] and returns a transposed kernel, i.e. one where
the x- and y-axes are switched.

For example
[para][example {
                    (1)
                    (2)
    {1 2 4 2 1} ==> (4)
                    (2)
                    (1)
}][para]

This method is its own inverse, i.e. application to its result returns
the original input, i.e. [example {
    [transpose [transpose $K]] == $K
}]


[call [cmd ::crimp] [method map] [arg arg]...]

This method accepts the same sub-methods and arguments as are accepted
by the [method table] method below. In contrast to [method table] the
result is not a list of values, but a map image directly suitable as
argument to the [method remap] method.


[call [cmd ::crimp] [method {table degamma}] [arg y]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun {inverse gamma correction}] with
parameter [arg y].

This inverse correction, defined in the domain of [lb]0..1[rb] for
both argument and result, is defined as:

[para][image gamma_inv][para]

Scaling of argument and result into the domain [lb]0..255[rb] of pixel
values, and rounding results to the nearest integer, causes the actual
definition used to be

[para][image scaled_gamma_inv]


[call [cmd ::crimp] [method {table gainw}] [arg gain] [arg bias]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through a simple linear function with parameters
[arg gain] and [arg bias]. The results are rounded to the nearest
integer and forced into the domain [lb]0..255[rb] by wrapping them
around (modulo), making the definition:

[para][image linear_wrap]


[call [cmd ::crimp] [method {table gain}] [arg gain] [arg bias]]

This method is like [method gainw], except that it deals with results
out of the domain [lb]0..255[rb] by clamping them to 0 and 255
respectively instead of wrapping around. I.e. its definition is

[para][image linear_clamp]


[call [cmd ::crimp] [method {table gamma}] [arg y]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun {gamma correction}] with parameter
[arg y].

This correction, defined in the domain of [lb]0..1[rb] for both
argument and result, is defined as:

[para][image gamma][para]

Scaling of argument and result into the domain [lb]0..255[rb] of pixel
values, and rounding results to the nearest integer, causes the actual
definition used to be

[para][image scaled_gamma]


[call [cmd ::crimp] [method {table gauss}] [arg sigma]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun {sampled gauss}] function with
parameter [arg sigma].

This function is defined as:

[para][image gauss][para]


[call [cmd ::crimp] [method {table identity}]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun identity] function, which is defined
as

[para][image identity]


[call [cmd ::crimp] [method {table invers}]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun inverse] function, which is defined
as

[para][image inverse]


[call [cmd ::crimp] [method {table solarize}] [arg threshold]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through the [fun solarize] function, with parameter
[arg threshold]. This function is defined as:

[para][image solarize]
[para]

Note how the function is the [fun identity] for values under the
threshold, and the [fun inverse] for values at and above it. Its
application to an image produces what is known as either
[term solarization] or [term {sabattier effect}].


[call [cmd ::crimp] [method {table threshold-ge}] [arg threshold]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through a [fun thresholding] (or [term binarization])
function, with parameter [arg threshold]. This function is defined as:

[para][image threshold-ge]
[para]


[call [cmd ::crimp] [method {table threshold-le}] [arg threshold]]

This method returns a list of 256 values, the result of running the
values 0 to 255 through a [fun thresholding] (or [term binarization])
function, with parameter [arg threshold]. This function is defined as:

[para][image threshold-le]
[para]

[list_end]


[keywords photo image]
[manpage_end]

