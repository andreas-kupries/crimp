alpha_over_rgba_rgb
Tcl_Obj* imageForeObj
Tcl_Obj* imageBackObj

/*
 * Alpha-based blending of two images, foreground, and background.  The
 * foreground's alpha channel is used to determine how much of the background
 * is seen. The result's alpha channel is a copy of the input's alpha.
 */

crimp_image*     result;
crimp_image*     imageF;
crimp_image*     imageB;
int px, py, oxf, oyf, oxb, oyb;
crimp_geometry bb;

crimp_input (imageForeObj, imageF, rgba);
crimp_input (imageBackObj, imageB, rgb);

/*
 * Compute union area of the two images to process.
 * Note how the images do not have to match in size.
 */

crimp_rect_union (&imageF->geo, &imageB->geo, &bb);

result = crimp_new_rgba_at (bb.x, bb.y, bb.w, bb.h);
oxf = crimp_x (imageF);
oyf = crimp_y (imageF);
oxb = crimp_x (imageB);
oyb = crimp_y (imageB);

/*
 * px, py are physical coordinates in the result, starting from 0.
 * The associated logical coordinates in the 2D plane are
 *  lx = px + x(result)
 *  lx = py + y(result)
 * And when we are inside an input its physical coordinates, from the logical are
 *  px = lx - x(input)
 *  py = ly - y(input)
 */

for (py = 0; py < bb.h; py++) {
    for (px = 0; px < bb.w; px++) {

        int lx = px + bb.x;
        int ly = py + bb.y;

	int inf = crimp_inside (imageF, lx, ly);
	int inb = crimp_inside (imageB, lx, ly);

	/*
	 * The result depends on where we are relative to both input.
	 * Inside of each input we take the respective value of the
	 * pixel. Outside of an input we take BLACK as the value
	 * instead, and TRANSPARENT for the ALPHA.
	 */

	int falpha = inf ? A (imageF, lx - oxf, ly - oyf) : TRANSPARENT;
	int fred   = inf ? R (imageF, lx - oxf, ly - oyf) : BLACK;
	int fgreen = inf ? G (imageF, lx - oxf, ly - oyf) : BLACK;
	int fblue  = inf ? B (imageF, lx - oxf, ly - oyf) : BLACK;

	int bred   = inb ? R (imageB, lx - oxb, ly - oyb) : BLACK;
	int bgreen = inb ? G (imageB, lx - oxb, ly - oyb) : BLACK;
	int bblue  = inb ? B (imageB, lx - oxb, ly - oyb) : BLACK;

	/*
	 * alpha is Opacity
	 * 255 <=> Fully opaque      <=> imageF
	 * 0   <=> Fully transparent <=> imageB
	 *
	 * => OUT = F*alpha + B*(1-alpha)
	 */

	R (result, px, py) = (fred   * falpha + (255 - falpha) * bred  ) / 255;
	G (result, px, py) = (fgreen * falpha + (255 - falpha) * bgreen) / 255;
	B (result, px, py) = (fblue  * falpha + (255 - falpha) * bblue ) / 255;
	A (result, px, py) = falpha;
    }
}

Tcl_SetObjResult(interp, crimp_new_image_obj (result));
return TCL_OK;

/* vim: set sts=4 sw=4 tw=80 et ft=c: */
/*
 * Local Variables:
 * mode: c
 * c-basic-offset: 4
 * fill-column: 78
 * End:
 */
