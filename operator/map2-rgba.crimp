crimp_primitive map2_rgba {
    image_rgba image
    sqlut_grey8 redMap
    sqlut_grey8 greenMap
    sqlut_grey8 blueMap
    sqlut_grey8 alphaMap
    int redControlChannel
    int greenControlChannel
    int blueControlChannel
    int alphaControlChannel
} image {
    /*
     * This operation is a generalized per-pixel transformation, mapping pixel
     * values to other pixel values in a completely arbitrary way. In contrast to
     * the map_* family of primitives here the mapping for one channel is
     * controlled by the data in a second channel. I.e. instead of a 256x1 table
     * we have 256 of these, in a single 256x256 map, with one channel selecting
     * the map (row) to use for the other. Effects possible with this are hue-dependent
     * changes to saturation or value, value dependent color-shifts, etc.
     *
     * Important: For the sake of convenience the map is not provided as a (Tcl)
     * list (of values), or array, but as an _image_ itself, a 256x256 (WxH)
     * grey8. We have constructors for such images (read-tcl primitive).
     */

    crimp_image*     result;
    int              x, y;

    /* TODO: custom type - limited-range integer -- enum! */
    if (!CRIMP_RANGEOK (redControlChannel,3)) {
        Tcl_SetResult(interp, "bad control for red map, expected index in (0...3)", TCL_STATIC);
        return NULL;
    }

    if (!CRIMP_RANGEOK (greenControlChannel,3)) {
        Tcl_SetResult(interp, "bad control for green map, expected index in (0...3)", TCL_STATIC);
        return NULL;
    }

    if (!CRIMP_RANGEOK (blueControlChannel,3)) {
        Tcl_SetResult(interp, "bad control for blue map, expected index in (0...3)", TCL_STATIC);
        return NULL;
    }

    if (!CRIMP_RANGEOK (alphaControlChannel,3)) {
        Tcl_SetResult(interp, "bad control for alpha map, expected index in (0...3)", TCL_STATIC);
        return NULL;
    }

    result = crimp_new_like (image);

    for (y = 0; y < crimp_h (result); y++) {
        for (x = 0; x < crimp_w (result); x++) {

	    /*
	     * Run the pixel value of the input image through the map to
	     * produce the value for the output.
	     */

          R (result, x, y) = GREY8 (redMap,   R (image, x, y), CH (image, redControlChannel,   x, y));
          G (result, x, y) = GREY8 (greenMap, G (image, x, y), CH (image, greenControlChannel, x, y));
          B (result, x, y) = GREY8 (blueMap,  B (image, x, y), CH (image, blueControlChannel,  x, y));
          A (result, x, y) = GREY8 (alphaMap, A (image, x, y), CH (image, alphaControlChannel, x, y));
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
