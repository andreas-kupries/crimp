crimp_primitive montagev_rgb {
    image_rgb imageTop
    image_rgb imageBottom
} image {
    /*
     * Place the two images adjacent to each other in the result, from top to
     * bottom. The images have to have the same width.
     */

    crimp_image*     result;
    int x, y;

    if (!crimp_eq_width (imageTop, imageBottom)) {
        Tcl_SetResult(interp, "image widths do not match", TCL_STATIC);
        return NULL;
    }

    result = crimp_new_rgb_at (crimp_x (imageTop), crimp_y (imageTop),
			       crimp_w (imageTop), crimp_h (imageTop) + crimp_h (imageBottom));

    for (y = 0; y < crimp_h (imageTop); y++) {
        for (x = 0; x < crimp_w (result); x++) {

	    R (result, x, y) = R (imageTop, x, y);
	    G (result, x, y) = G (imageTop, x, y);
	    B (result, x, y) = B (imageTop, x, y);
        }
    }

    for (y = 0; y < crimp_h (imageBottom); y++) {
        for (x = 0; x < crimp_w (result); x++) {

	    R (result, x, crimp_h (imageTop) + y) = R (imageBottom, x, y);
	    G (result, x, crimp_h (imageTop) + y) = G (imageBottom, x, y);
	    B (result, x, crimp_h (imageTop) + y) = B (imageBottom, x, y);
        }
    }

    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
