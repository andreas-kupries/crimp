crimp_primitive upsampley_rgb {
    image_obj_rgb image
    int      factor
} object0 {
    /*
     * The input image is upsampled in the y direction by inserting 'factor-1'
     * 0-pixels after every pixel of the input. Note that this method of expanding
     * an image introduces copies of the input to appear at higher frequencies.
     *
     * The output image has to be convolved with a low-pass filter after expansion
     * to avoid such artefacts. The integrated combination of upsampling and such
     * a filter is called 'interpolation'. This is but one step in the generation
     * of difference image pyramids.
     */

    crimp_image* result;
    int          x, yo, yi, dy;

    if (factor < 1) {
        Tcl_SetResult(interp, "bad sampling factor, expected integer > 0", TCL_STATIC);
        return NULL;
    }

    if (factor == 1) {
        return image.o;
    }

    result = crimp_new_at (image.i->itype, crimp_x (image.i), crimp_y (image.i), crimp_w (image.i), crimp_h (image.i)*factor);

    for (yo = 0, yi = 0; yi < crimp_h (image.i); yo += factor, yi ++) {
        for (x = 0; x < crimp_w (image.i); x ++) {
	    /* Copy the pixel */
	    R (result, x, yo) = R (image.i, x, yi);
	    G (result, x, yo) = G (image.i, x, yi);
	    B (result, x, yo) = B (image.i, x, yi);
        }

        /* And insert factor black lines after the input line */
        for (dy = 1; dy < factor; dy++) {
	    for (x = 0; x < crimp_w (image.i); x++) {
	        R (result, x, yo + dy) = BLACK;
	        G (result, x, yo + dy) = BLACK;
	        B (result, x, yo + dy) = BLACK;
	    }
        }
    }

    return crimp_new_image_obj(result);
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
