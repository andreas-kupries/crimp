# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0
## (c) 2011-2016 Andreas Kupries
# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt source support/synth.tcl

kt local testing crimp::core

# -------------------------------------------------------------------------
## Core math: cubic interpolation

test crimp-core-math-1cubic-1.0 {interpolate cubic, wrong args, not enough} -body {
    crimp interpolate cubic
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

test crimp-core-math-1cubic-1.1 {interpolate cubic, wrong args, not enough} -body {
    crimp interpolate cubic A
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

test crimp-core-math-1cubic-1.2 {interpolate cubic, wrong args, not enough} -body {
    crimp interpolate cubic A B
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

test crimp-core-math-1cubic-1.3 {interpolate cubic, wrong args, not enough} -body {
    crimp interpolate cubic A B C
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

test crimp-core-math-1cubic-1.4 {interpolate cubic, wrong args, not enough} -body {
    crimp interpolate cubic A B C D
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

test crimp-core-math-1cubic-1.5 {interpolate cubic, wrong args, too many} -body {
    crimp interpolate cubic A B C D XF XXX
} -returnCodes error -result {wrong # args: should be "crimp interpolate cubic a b c d xf"}

# -------------------------------------------------------------------------
## Fixed functionality

test crimp-core-math-1cubic-2.0 {interpolate cubic, fixed setup} -body {
    crimp interpolate cubic 0 0.5 0.5 1 0.5
} -result 0.5 -match epsilon

# -------------------------------------------------------------------------
## Randomized functionality.

apply {{} {
    set n 0
    foreach _ [iota 500] {
        # Compute an interpolation.
        set a [rand -10 10]
        set b [rand -10 10]
        set c [rand -10 10]
        set d [rand -10 10]
        set x [rand 0 1]

        set r [expr {$b + 0.5 * $x * ($c - $a + $x * (2.0*$a - 5.0*$b + 4.0*$c - $d + $x * (3.0*($b - $c) + $d - $a)))}]
        # reorganize the formula to have proper x, x^2, x^3 terms.

        # And check
        test crimp-core-math-1cubic-3.$n "interpolate cubic, fuzz" -body {
            crimp interpolate cubic $a $b $c $d $x
        } -result $r -match 13digits

        unset a b c d x r
        incr n
    }
}}

# -------------------------------------------------------------------------
cleanupTests

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
