crimp_primitive convolve_float_float {
    image_float image
    kernel_float kernel
    int scale
    int offset
} image {
    /*
     * Generic convolution operator. The kernel to convolve with is specified as a
     * floating-point image together with a scaling factor. This way we do not
     * need a separate matrix Tcl_ObjType.
     *
     * This convolver should be used only for small kernels, as it uses direct
     * convolution. For larger kernels it is planned to provide an FFT based
     * convolver.
     */

    crimp_image*     result;
    int              xo, yo, xi, yi, xk, yk, dx, dy, kw, kh;

    kw = crimp_w (kernel)/2;
    kh = crimp_h (kernel)/2;

    result = crimp_new_at (image->itype, crimp_x (image) + kw, crimp_y (image) + kh, crimp_w (image) - 2*kw, crimp_h (image) - 2*kh);

    for (yo = 0, yi = kh; yo < crimp_h (result); yo++, yi++) {
        for (xo = 0, xi = kw; xo < crimp_w (result); xo++, xi++) {

	    /*
	     * We convolve all channels with the same kernel, but otherwise
	     * identically
	     */

	    double sum = 0;

	    for (yk = 0, dy = -kh; yk < crimp_h (kernel); yk++, dy++) {
	        for (xk = 0, dx = -kw; xk < crimp_w (kernel); xk++, dx++) {

		    sum += FLOATP (kernel, xk, yk) * FLOATP (image, xi-dx, yi-dy);
	        }
	    }

	    sum /= scale; sum += offset; FLOATP (result, xo, yo) = sum;
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
