crimp_primitive warp_mbyte_field_nneighbour {
    image image
    image_float xvector
    image_float yvector
} image {
    /*
     * Warp image using the given vector field.
     */

    crimp_image* result;
    int x, y, c;
    double xf, yf;

    CRIMP_ASSERT_NOTIMGTYPE (image, float);
    CRIMP_ASSERT_NOTIMGTYPE (image, grey16);
    CRIMP_ASSERT_NOTIMGTYPE (image, grey32);


    if (!crimp_eq_dim (xvector, yvector)) {
        Tcl_SetResult(interp, "Unable to warp, expected equally-sized coordinate fields", TCL_STATIC);
        return NULL;
    }

    /*
     * Create result and scan through it, sampling the input under the guidance of
     * the coordinate fields.
     */

    result = crimp_new_at (image->itype, crimp_x (xvector), crimp_y (xvector), crimp_w (xvector), crimp_h (xvector));

    for (y = 0; y < crimp_h (result); y++) {
        for (x = 0; x < crimp_w (result); x++) {
	    int xi, yi, outside;

	    xf = FLOATP (xvector, x, y);
	    yf = FLOATP (yvector, x, y);

	    xi = xf;
	    yi = yf;
	    if ((xf - xi) >= 0.5) xi++;
	    if ((yf - yi) >= 0.5) yi++;

	    outside = (xi < 0) || (xi >= crimp_w (image)) || (yi < 0) || (yi >= crimp_h (image));

	    for (c = 0; c < image->itype->channels; c++) {
	        CH (result, c, x, y) = outside ? BLACK : CH (image, c, xi, yi);
	    }
        }
    }

    return result;

}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
