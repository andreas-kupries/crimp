crimp_primitive crop_grey8 {
    image_grey8 image
    int ww
    int hn
    int we
    int hs
} image {
    /*
     * Border cropping.
     */

    crimp_image* result;
    int          xo, yo, xi, yi;


    if ((ww < 0) || (hn < 0) || (we < 0) || (hs < 0)) {
        Tcl_SetResult(interp, "bad image border size, expected non-negative values", TCL_STATIC);
        return NULL;
    } else if (((ww + we) > crimp_w (image)) || ((hn + hs) > crimp_h (image))) {
        Tcl_SetResult(interp, "bad image border size, larger than image dimensions", TCL_STATIC);
        return NULL;
    }

    result = crimp_new_at (image->itype,
		           crimp_x (image) + ww,
		           crimp_y (image) + hn,
		           crimp_w (image) - ww - we,
		           crimp_h (image) - hn - hs);

    /*
     * Copy the un-cropped part of the input image.
     */

    for (yo = 0, yi = hn; yo < crimp_h (result); yo++, yi++) {
        for (xo = 0, xi = ww; xo < crimp_w (result); xo++, xi++) {
	    GREY8 (result, xo, yo) = GREY8 (image, xi, yi);
        }
    }

    return result;
}

# - -- --- ----- -------- -------------
# vim: set sts=4 sw=4 tw=80 et ft=tcl:
#
# Local Variables:
# mode: tcl
# fill-column: 78
# End:
#
