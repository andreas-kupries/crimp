# -*- tcl -*- tcl.tk//DSL diagram//EN//1.0
source [file join [file dirname [file normalize [info script]]] dsl_ctypes.inc]
set boxwidth [45 mm]

## ====================================================================

allocated struct image {
    field int         refCount
    field Tcl_Obj*    meta
    # Pixel structure information
    field image_type* itype
    # Location of the image in the infinite 2D-plane.
    field int         x
    field int         y
    # Dimensions of the image (bounding box)
    field int         w
    field int         h
    # The whole geometry could be put into a separate, inlined
    # structure. Another point is the possibility of extending it to
    # cover higher-dimensional structures. Example: A stack of
    # multi-channel volumes --> 5D.

    # Operation dependent information.
    field ClientData  ops_data
    field image_ops*  ops
    # Exposed image parameters of the operation, can be nothing.
    field int          nparam
    field image\[...\] "param\n  (Integrated)" \
	height [14 mm]
}

pointer {image meta} w w {
    allocated type Tcl_Obj
}

pointer {image itype} e {
    static struct image_type {
	field char*  name
	field int    size
	field int    channels
	field char** cname
    }

    pointer {image_type name} e {
	static cstring
    }

    pointer {image_type cname} e e e {
	set cname [static carray char* channels]
	pointer {cname [1]} e {static cstring}
    }
}

pointer {image ops} e e s s s {
    static struct ops_type {
	field char*  name
	sep
	field funptr_init  initialize()
	field funptr_fini  finalize()
	field funptr_next  next()
	field funptr_skip  skip()
	field funptr_whole whole()
	move
	sep
	field funptr_cons  cons()
	field funptr_dest  dest()
    } with Ln

    pointer {ops_type name} e {
	static cstring
    }

    group {
	east
	arrow <- from [$sep2 e]
	text "Tcl commands"
    }
}

pointer {image ops_data} w {
    allocated struct image_physical {
	field char*      curr_pixel
	field image_mem  imem
    } with Le

    pointer {image_physical imem} s s {
	allocated struct image_memory {
	    field int   refCount
	    field char* pixels
	} with Ln

	pointer {image_memory pixels} w {
	    allocated type memoryblock
	}
    }

    xpointer {image_physical curr_pixel} w \
	then \
	[[$memoryblock n] | [$image_physical curr_pixel w]] \
	to [$memoryblock n]
}

return

# Scratch
if 0 {
    # Iterator strides, in bytes. Derived from the image dimensions
    # and type (#channels, size/channel).
    field int   dx
    field int   dy
}
